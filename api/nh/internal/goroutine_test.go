package internal

import (
	공용 "github.com/ghts/ghts/common"

	"math"
	"strings"
	"testing"
	"time"
	"unsafe"
)

func f접속_확인() {
	if !f접속됨() {
		질의 := 공용.New질의_가변형(P30초, 공용.P메시지_GET, 테스트용_ID, 테스트용_암호, 테스트용_공인인증_암호)
		질의.S질의(Ch접속)
		질의.G회신()	// 메시지
		질의.G회신()	// 로그인 정보
		
		if !f접속됨() {
			panic("접속 시도 실패")
		}
	}
}

func f테스트_등락부호(테스트 *testing.T, 부호 uint8, 값, 비교대상, 상한, 하한 int64) {
	switch 부호 {
	case P상한:
		공용.F테스트_같음(테스트, 값, 상한)
	case P상승:
		공용.F테스트_참임(테스트, 값 > 비교대상)
	case P보합:
		// 이게 구체적으로 무슨 의미?? 일단은 임의로 변동폭 10% 이내라고 가정함. 
		공용.F테스트_참임(테스트, float64(값) < float64(비교대상) * 1.1 && 
							float64(값) > float64(비교대상) * 0.9)
	case P하락:
		공용.F테스트_참임(테스트, 값 < 비교대상)
	case P하한:
		공용.F테스트_같음(테스트, 값, 하한)
	default:
		공용.F문자열_출력("등락부호가 예상된 값이 아님. %v", 부호)
		테스트.FailNow()
	}
}

func f테스트_등락폭(테스트 *testing.T, 부호 uint8, 가격, 기준_가격, 등락폭 int64) {
	switch 부호 {
	case P상한, P상승:
		공용.F테스트_참임(테스트, 등락폭 > 0)
	case P보합:
		// 이게 구체적으로 무슨 의미?? 일단은 임의로 변동폭 10% 이내라고 가정함. 
		//공용.F테스트_참임(테스트, 등락율 < 10 && 등락율 > -10)
	case P하락, P하한:
		공용.F테스트_참임(테스트, 등락폭 < 0)
	default:
		공용.F문자열_출력("등락부호가 예상된 값이 아님. %v", 부호)
		테스트.FailNow()
	}
}

func f테스트_등락율(테스트 *testing.T, 부호 uint8, 등락율 float64) {
	switch 부호 {
	case P상한, P상승:
		공용.F테스트_참임(테스트, 등락율 > 0)
	case P보합:
		// 이게 구체적으로 무슨 의미?? 일단은 임의로 변동폭 10% 이내라고 가정함. 
		공용.F테스트_참임(테스트, 등락율 < 10 && 등락율 > -10)
	case P하락, P하한:
		공용.F테스트_참임(테스트, 등락율 < 0)
	default:
		공용.F문자열_출력("등락부호가 예상된 값이 아님. %v", 부호)
		테스트.FailNow()
	}
}

func Test_Ch접속(테스트 *testing.T) {
	if f접속됨() {
		공용.New질의_가변형(P30초, 공용.P메시지_GET).S질의(Ch접속_해제).G회신()
	}

	질의 := 공용.New질의_가변형(P30초, 공용.P메시지_GET, 테스트용_ID, 테스트용_암호, 테스트용_공인인증_암호)
	질의.S질의(Ch접속)
	
	for 질의.G회신_종료() {
		회신 := 질의.G회신()
		공용.F테스트_에러없음(테스트, 회신.G에러())
		
		switch 회신.G구분() {
		case P회신_접속:
			공용.F테스트_같음(테스트, 회신.G길이(), 1)
			
			로그인_정보, ok := 회신.G내용(0).(S로그인_정보)
			공용.F테스트_참임(테스트, ok)
			공용.F테스트_같음(테스트, 로그인_정보.G접속_ID(), 테스트용_ID)
			공용.F테스트_참임(테스트, strings.HasPrefix(로그인_정보.G접속_서버(), "mt")) //??
			공용.F테스트_참임(테스트, len(로그인_정보.G계좌_목록()) > 0)
		
			테스트용_계좌_인덱스 := -1
			for 인덱스, 계좌_정보 := range 로그인_정보.G계좌_목록() {
				if 계좌_정보.G계좌_번호() == 테스트용_계좌_번호 {
					테스트용_계좌_인덱스 = 인덱스 + 1 //계좌번호 인덱스는 '1'부터 시작됩니다.
					break
				}
			}
		
			공용.F테스트_참임(테스트, 테스트용_계좌_인덱스 > 0)
			
			// 접속 되었는 지 확인
			공용.F테스트_참임(테스트, f접속됨())
			
			회신 := 공용.New질의_가변형(P30초, 공용.P메시지_GET).S질의(Ch접속됨).G회신()
			공용.F테스트_에러없음(테스트, 회신.G에러())
			공용.F테스트_참임(테스트, 회신.G내용(0).(bool))
		case P회신_메시지:
			공용.F테스트_같음(테스트, 회신.G길이(), 2)
			
			_, ok := 회신.G내용(0).(string)	// 코드
			공용.F테스트_참임(테스트, ok)
			
			메시지, ok := 회신.G내용(1).(string)	// 메시지
			공용.F테스트_참임(테스트, ok)
			
			공용.F테스트_참임(테스트, strings.Contains(메시지, "로그인"))
			공용.F테스트_참임(테스트, strings.Contains(메시지, "성공"))
		default:
			공용.F문자열_출력("예상하지 못한 회신 종류 %v", 회신.G구분())
			공용.F변수값_확인(회신)
			테스트.FailNow()
		}
	}	
}

func TestCh조회_주식_현재가(테스트 *testing.T) {
	f접속_확인()
	
	종목 := 공용.F임의_종목()
	질의 := 공용.New질의_가변형(P30초, 공용.P메시지_GET, TR주식_현재가_조회, 종목.G코드())
	질의.S질의(Ch조회)
	
	i := 0
	for !질의.G회신_종료() {
		회신 := 질의.G회신()
		공용.F테스트_에러없음(테스트, 회신.G에러())
		
		switch 회신.G구분() {
		case P회신_조회:
			공용.F테스트_같음(테스트, 회신.G길이(), 1)
			
			수신_데이터, ok := 회신.G내용(0).(S수신_데이터)
			공용.F테스트_참임(테스트, ok)
			
			switch 수신_데이터.G블록_이름() {
			case "c1101OutBlock":
				공용.F테스트_같음(테스트, 수신_데이터.G길이(), int(unsafe.Sizeof(Tc1101OutBlock{})))
				
				s, ok := 수신_데이터.G데이터().(*S주식_현재가_조회_기본_자료)
				공용.F테스트_참임(테스트, ok)
				공용.F테스트_같음(테스트, s.M종목_코드, 종목.G코드())
				공용.F테스트_참임(테스트, strings.Contains(s.M종목명, 종목.G이름()))
				공용.F테스트_참임(테스트, s.M저가 > 0)
				공용.F테스트_참임(테스트, s.M하한가 > 0)
				공용.F테스트_참임(테스트, s.M연중_최저가 > 0)
				공용.F테스트_참임(테스트, s.M거래량 > 0)
				공용.F테스트_참임(테스트, s.M상한가 >= s.M고가)
				공용.F테스트_참임(테스트, s.M고가 >= s.M시가)
				공용.F테스트_참임(테스트, s.M고가 >= s.M저가)
				공용.F테스트_참임(테스트, s.M시가 >= s.M저가)
				공용.F테스트_참임(테스트, s.M저가 >= s.M하한가)
				공용.F테스트_참임(테스트, s.M현재가 >= s.M저가)
				공용.F테스트_참임(테스트, s.M현재가 <= s.M고가)
				공용.F테스트_참임(테스트, s.M가중_평균_가격 >= s.M저가)
				공용.F테스트_참임(테스트, s.M가중_평균_가격 <= s.M고가)
				공용.F테스트_참임(테스트, s.M52주_고가 >= s.M연중_최고가)
				공용.F테스트_참임(테스트, s.M52주_고가 >= s.M20일_고가)
				공용.F테스트_참임(테스트, s.M20일_고가 >= s.M5일_고가)
				공용.F테스트_참임(테스트, s.M5일_고가 >=  s.M5일_저가)
				공용.F테스트_참임(테스트, s.M연중_최저가 >= s.M52주_저가)
				공용.F테스트_참임(테스트, s.M20일_저가 >= s.M52주_저가)
				공용.F테스트_참임(테스트, s.M5일_저가 >=  s.M20일_저가)
				
				if s.M거래대금 > 0 {
					거래대금_근사값 := s.M거래량 * s.M현재가 / 1000000
					오차율 := float64(s.M거래대금 - 거래대금_근사값) / float64(s.M거래대금)
					공용.F테스트_참임(테스트, 오차율 > -0.2 && 오차율 < 0.1)
				}
				
				공용.F테스트_참임(s.M등락폭 >= 0, s.M등락폭)
				
				공용.F테스트_참임(테스트, s.M등락율 >= 0, s.M등락율)
				f테스트_등락부호(테스트, s.M시가_대비_부호, s.M현재가, s.M시가, s.M상한가, s.M하한가)
				f테스트_등락폭(테스트, s.M시가_대비_부호, s.M현재가, s.M시가, s.M시가_대비_등락폭)
				
				f테스트_등락부호(테스트, s.M전일대비_등락부호, s.M현재가, s.M전일종가, s.M상한가, s.M하한가)
				f테스트_등락폭(테스트, s.M전일_대비_부호, s.M현재가, s.M전일종가, s.M전일_대비_등락폭)
				
				if s.M매도_잔량_최우선 > 0 { 
					공용.F테스트_참임(테스트, s.M매도_호가_최우선 >= s.M현재가)
				}
				
				if s.M매도_잔량_차선 > 0 {
					공용.F테스트_참임(테스트, s.M매도_잔량_최우선 > 0) 
					공용.F테스트_참임(테스트, s.M매도_호가_차선 > s.M매도_호가_최우선)
				}
				
				if s.M매도_잔량_차차선 > 0 {
					공용.F테스트_참임(테스트, s.M매도_잔량_차선 > 0)
					공용.F테스트_참임(테스트, s.M매도_호가_차차선 > s.M매도_호가_차선)
				}
				
				if s.M매도_잔량_4차선 > 0 {
					공용.F테스트_참임(테스트, s.M매도_잔량_차차선 > 0)
					공용.F테스트_참임(테스트, s.M매도_호가_4차선 > s.M매도_호가_차차선)
				}
				
				if s.M매도_잔량_5차선 > 0 {
					공용.F테스트_참임(테스트, s.M매도_잔량_4차선 > 0)
					공용.F테스트_참임(테스트, s.M매도_호가_5차선 > s.M매도_호가_4차선)
				}
				
				if s.M매도_잔량_6차선 > 0 {
					공용.F테스트_참임(테스트, s.M매도_잔량_5차선 > 0)
					공용.F테스트_참임(테스트, s.M매도_호가_6차선 > s.M매도_호가_5차선)
				}
				
				if s.M매도_잔량_7차선 > 0 {
					공용.F테스트_참임(테스트, s.M매도_잔량_6차선 > 0)
					공용.F테스트_참임(테스트, s.M매도_호가_7차선 > s.M매도_호가_6차선)
				}
				
				if s.M매도_잔량_8차선 > 0 {
					공용.F테스트_참임(테스트, s.M매도_잔량_7차선 > 0)
					공용.F테스트_참임(테스트, s.M매도_호가_8차선 > s.M매도_호가_7차선)
				}
				
				if s.M매도_잔량_9차선 > 0 {
					공용.F테스트_참임(테스트, s.M매도_잔량_8차선 > 0)
					공용.F테스트_참임(테스트, s.M매도_호가_9차선 > s.M매도_호가_8차선)
				}
				
				if s.M매도_잔량_10차선 > 0 {
					공용.F테스트_참임(테스트, s.M매도_잔량_9차선 > 0)
					공용.F테스트_참임(테스트, s.M매도_호가_10차선 > s.M매도_호가_9차선)
				}
				
				if s.M매수_잔량_최우선 > 0 { 
					공용.F테스트_참임(테스트, s.M매수_호가_최우선 <= s.M현재가)
				}
				
				if s.M매수_잔량_차선 > 0 {
					공용.F테스트_참임(테스트, s.M매수_잔량_최우선 > 0) 
					공용.F테스트_참임(테스트, s.M매수_호가_차선 < s.M매수_호가_최우선)
				}
				
				if s.M매수_잔량_차차선 > 0 {
					공용.F테스트_참임(테스트, s.M매수_잔량_차선 > 0)
					공용.F테스트_참임(테스트, s.M매수_호가_차차선 < s.M매수_호가_차선)
				}
				
				if s.M매수_잔량_4차선 > 0 {
					공용.F테스트_참임(테스트, s.M매수_잔량_차차선 > 0)
					공용.F테스트_참임(테스트, s.M매수_호가_4차선 < s.M매수_호가_차차선)
				}
				
				if s.M매수_잔량_5차선 > 0 {
					공용.F테스트_참임(테스트, s.M매수_잔량_4차선 > 0)
					공용.F테스트_참임(테스트, s.M매수_호가_5차선 < s.M매수_호가_4차선)
				}
				
				if s.M매수_잔량_6차선 > 0 {
					공용.F테스트_참임(테스트, s.M매수_잔량_5차선 > 0)
					공용.F테스트_참임(테스트, s.M매수_호가_6차선 < s.M매수_호가_5차선)
				}
				
				if s.M매수_잔량_7차선 > 0 {
					공용.F테스트_참임(테스트, s.M매수_잔량_6차선 > 0)
					공용.F테스트_참임(테스트, s.M매수_호가_7차선 < s.M매수_호가_6차선)
				}
				
				if s.M매수_잔량_8차선 > 0 {
					공용.F테스트_참임(테스트, s.M매수_잔량_7차선 > 0)
					공용.F테스트_참임(테스트, s.M매수_호가_8차선 < s.M매수_호가_7차선)
				}
				
				if s.M매수_잔량_9차선 > 0 {
					공용.F테스트_참임(테스트, s.M매수_잔량_8차선 > 0)
					공용.F테스트_참임(테스트, s.M매수_호가_9차선 < s.M매수_호가_8차선)
				}
				
				if s.M매수_잔량_10차선 > 0 {
					공용.F테스트_참임(테스트, s.M매수_잔량_9차선 > 0)
					공용.F테스트_참임(테스트, s.M매수_호가_10차선 < s.M매수_호가_9차선)
				}
				
				매도_잔량_합계 := s.M매도_잔량_최우선 + s.M매도_잔량_차선 + s.M매도_잔량_차차선 +
					s.M매도_잔량_4차선 + s.M매도_잔량_5차선 + s.M매도_잔량_6차선 +
					s.M매도_잔량_7차선 + s.M매도_잔량_8차선 + s.M매도_잔량_9차선 +
					s.M매도_잔량_10차선
				
				공용.F테스트_참임(테스트, s.M매도_잔량_총합 >= 매도_잔량_합계)
				
				매수_잔량_합계 := s.M매수_잔량_최우선 + s.M매수_잔량_차선 + s.M매수_잔량_차차선 +
					s.M매수_잔량_4차선 + s.M매수_잔량_5차선 + s.M매수_잔량_6차선 +
					s.M매수_잔량_7차선 + s.M매수_잔량_8차선 + s.M매수_잔량_9차선 +
					s.M매수_잔량_10차선
				
				공용.F테스트_참임(테스트, s.M매수_잔량_총합 >= 매수_잔량_합계)
				
				공용.F테스트_참임(테스트, s.M시간외_매도_잔량 >= 0)
				공용.F테스트_참임(테스트, s.M시간외_매수_잔량 >= 0)
				
				공용.F테스트_참임(테스트, s.M피봇_2차_저항 > s.M피봇_1차_저항)
				공용.F테스트_참임(테스트, s.M피봇_1차_저항 > s.M피봇가)
				공용.F테스트_참임(테스트, s.M피봇가 > s.M피봇_1차_지지)
				공용.F테스트_참임(테스트, s.M피봇_1차_지지 > s.M피봇_2차_지지)
				공용.F테스트_참임(테스트, s.M코스피_코스닥_구분 == "코스피" || 
					s.M코스피_코스닥_구분 == "코스닥", s.M코스피_코스닥_구분)
				공용.F테스트_참임(테스트, len(s.M업종명) > 0)
				공용.F테스트_참임(테스트, s.M자본금_규모 == "소형주" || s.M자본금_규모 == "중형주" || 
					s.M자본금_규모 == "대형주", s.M자본금_규모)
				공용.F테스트_참임(테스트, strings.Contains(s.M결산월, "12월 결산"), s.M결산월)
				//공용.F변수값_확인(s.M시장조치1)
				//공용.F변수값_확인(s.M시장조치2)
				//공용.F변수값_확인(s.M시장조치3)
				//공용.F변수값_확인(s.M시장조치4)
				//공용.F변수값_확인(s.M시장조치5)
				//공용.F변수값_확인(s.M시장조치6)
				공용.F문자열_출력("전환사채 구분 : '%v'", s.M전환사채_구분)
				공용.F테스트_참임(테스트, s.M액면가 > 0)
				공용.F테스트_참임(테스트, strings.Contains(s.M전일종가_타이틀, "전일종가"))
				공용.F테스트_참임(테스트, math.Abs(float64(s.M전일종가) * 1.3 - float64(s.M상한가)) / float64(s.M전일종가) < 0.05) 
				공용.F테스트_참임(테스트, math.Abs(float64(s.M전일종가) * 0.7 - float64(s.M하한가)) / float64(s.M전일종가) < 0.05)
				공용.F테스트_참임(테스트, s.M대용가 < s.M전일종가 && 
						s.M대용가 > int64(float64(s.M전일종가) * 0.5))
				공용.F테스트_참임(테스트, s.M공모가 >= 0)
				
				지금 := time.Now()
				일년전 := 지금.Add(-1 *366 * 24 * time.Hour)
				공용.F테스트_참임(테스트, s.M52주_저가_일자.After(일년전), s.M52주_저가_일자)
				공용.F테스트_참임(테스트, s.M52주_저가_일자.Before(지금), s.M52주_저가_일자)
				공용.F테스트_참임(테스트, s.M52주_고가_일자.After(일년전), s.M52주_고가_일자)
				공용.F테스트_참임(테스트, s.M52주_고가_일자.Before(지금), s.M52주_고가_일자)
				
				공용.F테스트_참임(테스트, s.M유동_주식수 >= 0) 
				공용.F테스트_참임(테스트, s.M상장_주식_수량_1000주_단위 >= s.M유동_주식수)
				
				차이 := float64(s.M시가_총액 - (s.M현재가 * s.M상장_주식_수량_1000주_단위 / 100000))
				공용.F테스트_참임(테스트, math.Abs(차이 / float64(s.M시가_총액)) <= 0.3) 
				
				금일_시작 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 0, 0, 0, 0, 지금.Location())
				금일_끝 := 금일_시작.Add(24 * time.Hour)
				
				공용.F테스트_참임(테스트, s.M거래원_정보_수신_시간.After(금일_시작))
				공용.F테스트_참임(테스트, s.M거래원_정보_수신_시간.Before(금일_끝))
	
				if s.M매도_거래량_1 > 0 {
					공용.F테스트_참임(테스트, len(s.M매도_거래원_1) > 0)
				}
				
				if s.M매수_거래량_1 > 0 {
					공용.F테스트_참임(테스트, len(s.M매수_거래원_1) > 0)
				}
				
				if s.M매도_거래량_2 > 0 {
					공용.F테스트_참임(테스트, len(s.M매도_거래원_2) > 0)
				}
				
				if s.M매수_거래량_2 > 0 {
					공용.F테스트_참임(테스트, len(s.M매수_거래원_2) > 0)
				}
				
				if s.M매도_거래량_3 > 0 {
					공용.F테스트_참임(테스트, len(s.M매도_거래원_3) > 0)
				}
				
				if s.M매수_거래량_3 > 0 {
					공용.F테스트_참임(테스트, len(s.M매수_거래원_3) > 0)
				}
				
				if s.M매도_거래량_4 > 0 {
					공용.F테스트_참임(테스트, len(s.M매도_거래원_4) > 0)
				}
				
				if s.M매수_거래량_4 > 0 {
					공용.F테스트_참임(테스트, len(s.M매수_거래원_4) > 0)
				}
				
				if s.M매도_거래량_5 > 0 {
					공용.F테스트_참임(테스트, len(s.M매도_거래원_5) > 0)
				}
				
				if s.M매수_거래량_5 > 0 {
					공용.F테스트_참임(테스트, len(s.M매수_거래원_5) > 0)
				}
	
				공용.F테스트_참임(테스트, s.M외국인_매도_거래량 > 0)
				공용.F테스트_참임(테스트, s.M외국인_매수_거래량 > 0)
				공용.F테스트_참임(테스트, s.M외국인_시간.After(금일_시작) && s.M외국인_시간.Before(금일_끝))
				공용.F테스트_참임(테스트, s.M외국인_지분율 >= 0 && s.M외국인_지분율 <= 100)
				공용.F변수값_확인(s.M결제일)
				공용.F변수값_확인(테스트, s.M신용잔고_퍼센트 >= 0 && s.M신용잔고_퍼센트 <= 100)
				공용.F변수값_확인(s.M유상_배정_기준일)
				공용.F변수값_확인(s.M무상_배정_기준일)
				공용.F테스트_참임(테스트, s.M유상_배정_비율 >= 0 && s.M유상_배정_비율 <= 100)
				공용.F테스트_참임(테스트, s.M외국인_변동주_수량 >= 0)
				공용.F테스트_참임(테스트, s.M무상_배정_비율 >= 0 && s.M무상_배정_비율 <= 100)
				공용.F변수값_확인(s.M당일_자사주_신청_여부)
				공용.F테스트_참임(테스트, s.M상장일.Before(지금))
				공용.F테스트_참임(테스트, s.M대주주_지분율 >= 0 && s.M대주주_지분율 <= 100)
				공용.F테스트_참임(테스트, s.M대주주_지분율_정보_일자.After(일년전) && s.M대주주_지분율_정보_일자.Before(금일_끝))
				공용.F변수값_확인(s.M네잎클로버_종목_여부)	// 이건 뭐지?
				공용.F테스트_참임(테스트, s.M증거금_비율 >= 0 && s.M증거금_비율 <= 100)
				공용.F변수값_확인(s.M자본금)
				
				
				매도_거래량_합계 := s.M매도_거래량_1 + s.M매도_거래량_2 + s.M매도_거래량_3 + 
					s.M매도_거래량_4 + s.M매도_거래량_5
				공용.F테스트_참임(테스트, s.M전체_거래원_매도_합계 >= 매도_거래량_합계)
				
				매수_거래량_합계 := s.M매수_거래량_1 + s.M매수_거래량_2 + s.M매수_거래량_3 + 
					s.M매수_거래량_4 + s.M매수_거래량_5
				공용.F테스트_참임(테스트, s.M전체_거래원_매수_합계 >= 매수_거래량_합계)
				
				공용.F변수값_확인(s.M종목명2)
				공용.F변수값_확인(s.M우회_상장_여부)
				공용.F변수값_확인(s.M유동주_회전율_2)
				공용.F변수값_확인(s.M코스피_구분_2)   // 앞에 나온 '코스피/코스닥 구분'과 중복 아닌가?
				공용.F변수값_확인(s.M공여율_기준일)  // 공여율은 '신용거래 관련 비율'이라고 함.
				공용.F테스트_참임(테스트, s.M공여율 >= 0 && s.M공여율 <= 100)   // 공여율(%)
				공용.F테스트_참임(테스트, s.PER < 30)  // PER가 6~12정도가 보통이니 30이 넘는 경우는 사실상 존재하지 않겠지?
				공용.F변수값_확인(s.M종목별_신용_한도)
				공용.F테스트_참임(테스트, s.M가중_평균_가격 >= s.M저가 && s.M가중_평균_가격 <= s.M고가)
				공용.F변수값_확인(s.M상장_주식_수량)
				공용.F변수값_확인(s.M추가_상장_주식_수량)
				공용.F변수값_확인(s.M종목_코멘트)
				공용.F변수값_확인(s.M전일_거래량)
				공용.F테스트_참임(테스트, s.M연중_최고가_일자.Year() == 지금.Year() && s.M연중_최고가_일자.Before(금일_끝))
				공용.F테스트_참임(테스트, s.M연중_최저가_일자.Year() == 지금.Year() && s.M연중_최저가_일자.Before(금일_끝))
				공용.F테스트_참임(테스트, s.M외국인_보유_주식수 <=  s.M상장_주식_수량 + s.M추가_상장_주식_수량)
				공용.F테스트_참임(테스트, s.M외국인_지분_한도 >= 0 && s.M외국인_지분_한도 <= 100)
				공용.F변수값_확인(s.M매매_수량_단위)
				
				switch s.M대량_매매_방향 {
				case 0:
					공용.F테스트_거짓임(테스트, s.M대량_매매_존재)
				case 1, 2:
					공용.F테스트_참임(테스트, s.M대량_매매_존재)
				default:
					공용.F문자열_출력("예상치 못한 '대량_매매_방향'값 %v", s.M대량_매매_방향)
				}
			case "c1101OutBlock2":
				// TODO
			case "c1101OutBlock3":
				// TODO
			default:
				공용.F문자열_출력("예상치 못한 블록 이름 %v", 수신_데이터.G블록_이름()) 
				테스트.FailNow()
			}
		case P회신_에러:
			//TO DO
			테스트.FailNow()
		case P회신_메시지:
			공용.F테스트_같음(테스트, 회신.G길이(), 2)
			
			_, ok := 회신.G내용(0).(string)	// 코드
			공용.F테스트_참임(테스트, ok)
			
			메시지, ok := 회신.G내용(1).(string)
			공용.F테스트_참임(테스트, ok)
			공용.F테스트_참임(테스트, strings.Contains(메시지, "조회"))
			공용.F테스트_참임(테스트, strings.Contains(메시지, "완료"))
		case P회신_완료:
			공용.F테스트_같음(테스트, 회신.G길이(), 1)
			
			수신_데이터, ok := 회신.G내용(0).(S수신_데이터)
			공용.F테스트_참임(테스트, ok)
			공용.F테스트_같음(테스트, 수신_데이터.G블록_이름(), "c1101")
			공용.F테스트_같음(테스트, 수신_데이터.G길이(), 0)
			공용.F테스트_같음(테스트, 수신_데이터.G데이터(), nil)
		default:
			공용.F문자열_출력("\n*** %v 예상치 못한 회신 구분 ***", i); i++	// 디버깅
			공용.F변수값_확인(회신.G구분())
			공용.F변수값_확인(회신)
			테스트.FailNow()
		}
	}	
}

// 제일 마지막에 실행되도록 제일 아래에 배치.
func TestCh접속_해제(테스트 *testing.T) {
	f접속_확인()
	
	// 접속 해제
	회신 := 공용.New질의_가변형(P30초, 공용.P메시지_GET).S질의(Ch접속_해제).G회신()
	공용.F테스트_에러없음(테스트, 회신.G에러())
	공용.F테스트_같음(테스트, 회신.G구분(), P회신_접속_해제)
	공용.F테스트_참임(테스트, 회신.G내용(0).(bool))
	
	// 접속 해제 확인
	회신 = 공용.New질의_가변형(P30초, 공용.P메시지_GET).S질의(Ch접속됨).G회신()
	공용.F테스트_에러없음(테스트, 회신.G에러())
	공용.F테스트_같음(테스트, 회신.G구분(), P회신_접속됨)
	공용.F테스트_거짓임(테스트, 회신.G내용(0).(bool), false)
}
