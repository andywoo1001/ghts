package internal

import (
	공용 "github.com/ghts/ghts/common"

	"math"
	"strings"
	"testing"
	"time"
	"unicode/utf8"
	"unsafe"
)

func TestCh조회_ETF_현재가(테스트 *testing.T) {
	f접속_확인()

	종목 := 공용.F임의_종목_ETF()
	질의 := 공용.New질의_가변형(P30초, 공용.P메시지_GET, TR_ETF_현재가_조회, 종목.G코드())
	질의.S질의(Ch조회)

	기본_자료 := new(S_ETF_현재가_조회_기본_자료)
	기본_자료 = nil

	변동_자료_모음 := make([]S_ETF_현재가_조회_변동_거래_자료, 0)

	동시호가_자료 := new(S_ETF_현재가_조회_동시호가)
	동시호가_자료 = nil

	ETF_자료 := new(S_ETF_현재가_조회_ETF자료)
	ETF_자료 = nil

	지수_자료 := new(S_ETF_현재가_조회_지수_자료)
	지수_자료 = nil

	ok := true
	완료_메시지_수신 := false

	공용.F문자열_출력("*** 종목코드 %v ***", 종목.G코드())

	for !완료_메시지_수신 || 기본_자료 == nil {
		회신 := 질의.G회신()
		공용.F테스트_에러없음(테스트, 회신.G에러())

		switch 회신.G구분() {
		case P회신_조회:
			공용.F테스트_같음(테스트, 회신.G길이(), 1)

			수신_데이터, ok := 회신.G내용(0).(S수신_데이터)
			공용.F테스트_참임(테스트, ok)

			switch 수신_데이터.G블록_이름() {
			case "c1151OutBlock":
				공용.F테스트_같음(테스트, 수신_데이터.G길이(),
					int(unsafe.Sizeof(Tc1151OutBlock{})))
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				기본_자료, ok = 수신_데이터.G데이터().(*S_ETF_현재가_조회_기본_자료)
				공용.F테스트_참임(테스트, ok)
			case "c1151OutBlock2":
				공용.F테스트_참임(테스트, 수신_데이터.G길이()%
					int(unsafe.Sizeof(Tc1151OutBlock2{})) == 0)
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				변동_자료_모음, ok = 수신_데이터.G데이터().([]S_ETF_현재가_조회_변동_거래_자료)
				공용.F테스트_참임(테스트, ok)
			case "c1151OutBlock3":
				공용.F테스트_같음(테스트, 수신_데이터.G길이(),
					int(unsafe.Sizeof(Tc1151OutBlock3{})))
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				동시호가_자료, ok = 수신_데이터.G데이터().(*S_ETF_현재가_조회_동시호가)
				공용.F테스트_참임(테스트, ok)
			case "c1151OutBlock4":
				공용.F테스트_같음(테스트, 수신_데이터.G길이(),
					int(unsafe.Sizeof(Tc1151OutBlock4{})))
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				ETF_자료, ok = 수신_데이터.G데이터().(*S_ETF_현재가_조회_ETF자료)
				공용.F테스트_참임(테스트, ok)
			case "c1151OutBlock5":
				공용.F테스트_같음(테스트, 수신_데이터.G길이(),
					int(unsafe.Sizeof(Tc1151OutBlock5{})))
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				지수_자료, ok = 수신_데이터.G데이터().(*S_ETF_현재가_조회_지수_자료)
				공용.F테스트_참임(테스트, ok)
			default:
				공용.F문자열_출력("예상치 못한 블록 이름 %v", 수신_데이터.G블록_이름())
				테스트.FailNow()
			}
		case P회신_메시지:
			공용.F테스트_같음(테스트, 회신.G길이(), 2)

			_, ok = 회신.G내용(0).(string) // 코드
			공용.F테스트_참임(테스트, ok)

			메시지, ok := 회신.G내용(1).(string)
			공용.F테스트_참임(테스트, ok)

			공용.F테스트_참임(테스트, strings.Contains(메시지, "TRU") ||
				strings.Contains(메시지, "조회완료"))
		case P회신_완료:
			공용.F테스트_같음(테스트, 회신.G길이(), 1)

			수신_데이터, ok := 회신.G내용(0).(S수신_데이터)
			공용.F테스트_참임(테스트, ok)
			공용.F테스트_같음(테스트, 수신_데이터.G블록_이름(), "c1151")
			공용.F테스트_같음(테스트, 수신_데이터.G길이(), 0)
			공용.F테스트_같음(테스트, 수신_데이터.G데이터(), nil)

			완료_메시지_수신 = true
		case P회신_에러:
			공용.F에러("P회신_에러 수신")
			테스트.FailNow()
		default:
			공용.F문자열_출력("\n*** %v 예상치 못한 회신 구분 : %v ***", 회신.G구분())
			공용.F변수값_확인(회신.G구분())
			공용.F변수값_확인(회신)
			테스트.FailNow()
		}
	}

	// 기본 자료 테스트
	f_ETF_현재가_조회_기본_자료_테스트(테스트, 기본_자료, 종목)

	// 변동 자료 테스트
	f_ETF_현재가_조회_변동_거래_자료_테스트(테스트, 기본_자료, 변동_자료_모음)

	// 동시호가 자료 테스트
	f_ETF_현재가_조회_동시호가_자료_테스트(테스트, 기본_자료, 동시호가_자료)

	// ETF 자료 테스트
	f_ETF_현재가_조회_ETF_자료_테스트(테스트, 기본_자료, ETF_자료)

	// 기반 지수 자료 테스트
	f_ETF_현재가_조회_지수_자료_테스트(테스트, 기본_자료, 지수_자료)
}

func f_ETF_현재가_조회_기본_자료_테스트(테스트 *testing.T,
	기본_자료 *S_ETF_현재가_조회_기본_자료, 종목 공용.I종목) {
	지금 := time.Now()

	삼분전 := 지금.Add(-3 * time.Minute)
	삼분후 := 지금.Add(3 * time.Minute)

	금일_0시 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 0, 0, 0, 0, 지금.Location())
	금일_15시 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 15, 0, 0, 0, 지금.Location())
	금일_16시 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 16, 0, 0, 0, 지금.Location())
	금일_24시 := 금일_0시.Add(24 * time.Hour)

	개장_시각 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 9, 0, 0, 0, 지금.Location())
	거래_마감_시각 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 14, 50, 0, 0, 지금.Location())

	일년전 := 지금.Add(-1 * 366 * 24 * time.Hour)

	공용.F테스트_참임(테스트, 기본_자료 != nil, "기본 자료를 수신하지 못함.")
	공용.F테스트_같음(테스트, 기본_자료.M종목_코드, 종목.G코드())
	공용.F테스트_참임(테스트, utf8.ValidString(기본_자료.M종목명))
	
	공백제거_종목명_수신값 := strings.Replace(기본_자료.M종목명, " ", "", -1)
	공백제거_종목명_비교값 := strings.Replace(종목.G이름(), " ", "", -1)
	공용.F테스트_참임(테스트, strings.Contains(공백제거_종목명_수신값, 공백제거_종목명_비교값))
	공용.F테스트_참임(테스트, 기본_자료.M등락율 >= 0) // 절대값임.

	공용.F메모("c1151 전일 기본 자료 대비 테스트 추가할 것.")
	f테스트_등락부호(테스트, 기본_자료.M등락부호, 기본_자료.M현재가, 기본_자료.M전일_종가, 기본_자료.M상한가, 기본_자료.M하한가)
	공용.F테스트_같음(테스트, 기본_자료.M전일_종가+f등락부호2정수(기본_자료.M등락부호)*기본_자료.M등락폭, 기본_자료.M현재가)

	if 기본_자료.M현재가 != 0 && 기본_자료.M등락폭 != 0 && 기본_자료.M등락율 != 0 {
		등락율_근사값 := math.Abs(float64(기본_자료.M등락폭)) / float64(기본_자료.M현재가) * 100
		공용.F테스트_참임(테스트, 공용.F오차율(등락율_근사값, 기본_자료.M등락율) < 10)
	}

	공용.F테스트_참임(테스트, 기본_자료.M거래량 >= 0)
	공용.F테스트_참임(테스트, 기본_자료.M전일대비_거래량_비율 >= 0)

	if 기본_자료.M유동_주식수_1000주 != 0 {
		유동주_회전율_근사값 := float64(기본_자료.M거래량) /
			float64(기본_자료.M유동_주식수_1000주*1000) * 100
		유동주_회전율_근사값 = math.Trunc(유동주_회전율_근사값*100) / 100
		공용.F테스트_참임(테스트, 공용.F오차(기본_자료.M유동주_회전율, 유동주_회전율_근사값) < 1 ||
			공용.F오차율(기본_자료.M유동주_회전율, 유동주_회전율_근사값) < 10,
			기본_자료.M유동주_회전율, 유동주_회전율_근사값)
	}

	if 기본_자료.M거래대금_100만 != 0 && 기본_자료.M거래량 != 0 && 기본_자료.M현재가 != 0 {
		거래대금_근사값 := 기본_자료.M거래량 * 기본_자료.M현재가 / 1000000
		공용.F테스트_참임(테스트, 공용.F오차율(기본_자료.M거래대금_100만, 거래대금_근사값) < 10)
	}

	공용.F테스트_참임(테스트, 기본_자료.M저가 > 0)
	공용.F테스트_참임(테스트, 기본_자료.M하한가 > 0)
	공용.F테스트_참임(테스트, 기본_자료.M상한가 >= 기본_자료.M고가)
	공용.F테스트_참임(테스트, 기본_자료.M고가 >= 기본_자료.M시가)
	공용.F테스트_참임(테스트, 기본_자료.M고가 >= 기본_자료.M저가)
	공용.F테스트_참임(테스트, 기본_자료.M시가 >= 기본_자료.M저가)
	공용.F테스트_참임(테스트, 기본_자료.M저가 >= 기본_자료.M하한가)
	공용.F테스트_참임(테스트, 기본_자료.M현재가 >= 기본_자료.M저가)
	공용.F테스트_참임(테스트, 기본_자료.M현재가 <= 기본_자료.M고가)
	공용.F테스트_참임(테스트, 기본_자료.M52주_고가 >= 기본_자료.M20일_고가)
	공용.F테스트_참임(테스트, 기본_자료.M20일_고가 >= 기본_자료.M5일_고가)
	공용.F테스트_참임(테스트, 기본_자료.M5일_고가 >= 기본_자료.M5일_저가)
	공용.F테스트_참임(테스트, 기본_자료.M20일_저가 >= 기본_자료.M52주_저가)
	공용.F테스트_참임(테스트, 기본_자료.M5일_저가 >= 기본_자료.M20일_저가)

	switch {
	case 기본_자료.M시각.After(삼분후): // 미래 자료
		공용.F에러("잘못된 시각. %v", 기본_자료.M시각)
		테스트.FailNow()
	case 기본_자료.M시각.Before(금일_0시): // 개장일이 아닌 날짜에 나오는 과거 자료.
		공용.F테스트_참임(테스트, 기본_자료.M시각.Hour() == 15, 기본_자료.M시각) // 과거 개장일의 장마감 시각
	case 지금.After(개장_시각) && 지금.Before(거래_마감_시각): // 장중
		공용.F테스트_참임(테스트, 기본_자료.M시각.After(삼분전) && 기본_자료.M시각.Before(삼분후), 기본_자료.M시각)
	default: // 장외
		공용.F테스트_참임(테스트, 기본_자료.M시각.After(금일_15시) && 기본_자료.M시각.Before(금일_16시), 기본_자료.M시각)
	}

	f테스트_등락부호(테스트, 기본_자료.M시가대비_등락부호, 기본_자료.M현재가, 기본_자료.M시가, 기본_자료.M상한가, 기본_자료.M하한가)
	공용.F테스트_같음(테스트, 기본_자료.M시가+기본_자료.M시가대비_등락폭, 기본_자료.M현재가) // 시가대비_등락폭 자체에 부호가 반영되어 있음.
	
	for i, 매도_잔량 := range 기본_자료.M매도_잔량_모음 {
		switch {
		case 매도_잔량 == 0: 
			continue
		case 매도_잔량 < 0:
			공용.F에러("예상치 못한 매도 잔량값. %v", 매도_잔량)
			테스트.FailNow()
		}
		
		// 매도_잔량 > 0
		매도_호가 := 기본_자료.M매도_호가_모음[i]
		공용.F테스트_참임(테스트, 매도_호가 <= 기본_자료.M상한가)
		공용.F테스트_참임(테스트, 매도_호가 >= 기본_자료.M하한가)
		
		switch i {
		case 0:
			공용.F테스트_참임(테스트, 매도_호가 >= 기본_자료.M현재가)
		default:
			공용.F테스트_참임(테스트, 매도_호가 > 기본_자료.M매도_호가_모음[i-1])
		} 
	}
	
	for i, 매수_잔량 := range 기본_자료.M매수_잔량_모음 {
		switch {
		case 매수_잔량 == 0: 
			continue
		case 매수_잔량 < 0:
			공용.F에러("예상치 못한 매수 잔량값. %v", 매수_잔량)
			테스트.FailNow()
		}
		
		// 매수_잔량 > 0
		매수_호가 := 기본_자료.M매수_호가_모음[i]
		공용.F테스트_참임(테스트, 매수_호가 <= 기본_자료.M상한가)
		공용.F테스트_참임(테스트, 매수_호가 >= 기본_자료.M하한가)
		
		switch i {
		case 0:
			공용.F테스트_참임(테스트, 매수_호가 >= 기본_자료.M현재가)
		default:
			공용.F테스트_참임(테스트, 매수_호가 > 기본_자료.M매수_호가_모음[i-1])
		}
	}
	
	공용.F테스트_참임(테스트, 기본_자료.M시간외_매도_잔량 >= 0)
	공용.F테스트_참임(테스트, 기본_자료.M시간외_매수_잔량 >= 0)
	공용.F테스트_참임(테스트, 기본_자료.M피봇_2차_저항 > 기본_자료.M피봇_1차_저항)
	공용.F테스트_참임(테스트, 기본_자료.M피봇_1차_저항 > 기본_자료.M피봇_가격)
	공용.F테스트_참임(테스트, 기본_자료.M피봇_가격 > 기본_자료.M피봇_1차_지지)
	공용.F테스트_참임(테스트, 기본_자료.M피봇_1차_지지 > 기본_자료.M피봇_2차_지지)
	공용.F테스트_참임(테스트, utf8.ValidString(기본_자료.M시장_구분))
	공용.F테스트_참임(테스트, 기본_자료.M시장_구분 == "코스피" || 기본_자료.M시장_구분 == "코스닥")
	공용.F테스트_참임(테스트, utf8.ValidString(기본_자료.M업종명))
	공용.F테스트_참임(테스트, utf8.ValidString(기본_자료.M자본금_규모))
	공용.F테스트_참임(테스트, 기본_자료.M자본금_규모 == "", 기본_자료.M자본금_규모)
	공용.F테스트_참임(테스트, utf8.ValidString(기본_자료.M결산월))
	공용.F테스트_참임(테스트, strings.Contains(기본_자료.M결산월, "월 결산"))
	
	for _, 추가_정보 := range 기본_자료.M추가_정보_모음 {
		공용.F테스트_참임(테스트, utf8.ValidString(추가_정보))
	}
	
	공용.F테스트_참임(테스트, utf8.ValidString(기본_자료.M서킷_브레이커_구분))
	switch 기본_자료.M서킷_브레이커_구분 {
	case "CB발동", "CB해제", "장종료", "":
		break
	default:
		공용.F에러("서킷_브레이커_구분 값이 올바르지 않습니다. '%v'", 기본_자료.M서킷_브레이커_구분)
		테스트.FailNow()
	}

	공용.F테스트_참임(테스트, 기본_자료.M액면가 ==0, 기본_자료.M액면가)	// ETF는 액면가가 없는 건가?
	공용.F테스트_참임(테스트, 공용.F오차율(기본_자료.M상한가, float64(기본_자료.M전일_종가)*1.3) < 5)
	공용.F테스트_참임(테스트, 공용.F오차율(기본_자료.M하한가, float64(기본_자료.M전일_종가)*0.7) < 5)
	공용.F테스트_참임(테스트, 기본_자료.M대용가 < 기본_자료.M전일_종가)
	공용.F테스트_참임(테스트, 기본_자료.M대용가 > int64(float64(기본_자료.M전일_종가)*0.5))
	공용.F테스트_참임(테스트, 기본_자료.M공모가 >= 0)
	공용.F테스트_참임(테스트, 기본_자료.M52주_저가_일자.After(일년전), 기본_자료.M52주_저가_일자)
	공용.F테스트_참임(테스트, 기본_자료.M52주_저가_일자.Before(지금), 기본_자료.M52주_저가_일자)
	공용.F테스트_참임(테스트, 기본_자료.M52주_고가_일자.After(일년전), 기본_자료.M52주_고가_일자)
	공용.F테스트_참임(테스트, 기본_자료.M52주_고가_일자.Before(지금), 기본_자료.M52주_고가_일자)
	공용.F테스트_참임(테스트, 기본_자료.M유동_주식수_1000주 >= 0)

	시가총액_근사값 := 기본_자료.M현재가 * 기본_자료.M상장_주식수 / 100000000
	공용.F테스트_참임(테스트, 공용.F오차율(기본_자료.M시가_총액_억, 시가총액_근사값) < 10)

	switch {
	case 기본_자료.M거래원_정보_수신_시각.After(삼분후): // 미래 자료
		공용.F에러("잘못된 시각. %v", 기본_자료.M거래원_정보_수신_시각)
		테스트.FailNow()
	case 기본_자료.M거래원_정보_수신_시각.Before(금일_0시): // 과거 자료.
		공용.F테스트_참임(테스트, 기본_자료.M거래원_정보_수신_시각.Hour() == 15, 기본_자료.M거래원_정보_수신_시각) // 과거 장마감 시각
	case 지금.After(개장_시각) && 지금.Before(거래_마감_시각): // 장중
		공용.F테스트_참임(테스트, 기본_자료.M거래원_정보_수신_시각.After(개장_시각) && 기본_자료.M시각.Before(삼분후), 기본_자료.M거래원_정보_수신_시각)
	default: // 장 마감 후
		공용.F테스트_참임(테스트, 기본_자료.M거래원_정보_수신_시각.After(금일_15시) && 기본_자료.M거래원_정보_수신_시각.Before(금일_16시), 기본_자료.M거래원_정보_수신_시각)
	}
	
	매도_거래량_합계 := int64(0)
	for i, 매도_거래량 := range 기본_자료.M매도_거래량_모음 {
		switch {
		case 매도_거래량 == 0: 
			continue
		case 매도_거래량 < 0:
			공용.F에러("예상치 못한 매도 거래량. %v", 매도_거래량)
			테스트.FailNow()
		}
		
		// 매도_거래량 > 0
		매도_거래량_합계 += int64(매도_거래량)		
		매도_거래원 := 기본_자료.M매도_거래원_모음[i]
		공용.F테스트_참임(테스트, utf8.ValidString(매도_거래원), i, 매도_거래원)
		공용.F테스트_참임(테스트, len(매도_거래원) > 0) 
	}
	
	매수_거래량_합계 := int64(0)
	for i, 매수_거래량 := range 기본_자료.M매수_거래량_모음 {
		switch {
		case 매수_거래량 == 0: 
			continue
		case 매수_거래량 < 0:
			공용.F에러("예상치 못한 매수 거래량. %v", 매수_거래량)
			테스트.FailNow()
		}
		
		// 매수_거래량 > 0		
		매수_거래량_합계 += int64(매수_거래량)
		매수_거래원 := 기본_자료.M매수_거래원_모음[i]
		공용.F테스트_참임(테스트, utf8.ValidString(매수_거래원), i, 매수_거래원)
		공용.F테스트_참임(테스트, len(매수_거래원) > 0) 
	}
	
	공용.F테스트_참임(테스트, 기본_자료.M외국인_매도_거래량 >= 0)
	공용.F테스트_참임(테스트, 기본_자료.M외국인_매수_거래량 >= 0)
	공용.F테스트_참임(테스트, 기본_자료.M외국인_시간.After(금일_0시) && 기본_자료.M외국인_시간.Before(금일_24시), 기본_자료.M외국인_시간)
	공용.F테스트_참임(테스트, 기본_자료.M외국인_지분율 >= 0 && 기본_자료.M외국인_지분율 <= 100)

	일주전 := 지금.Add(-7 * 24 * time.Hour)
	이주후 := 지금.Add(14 * 24 * time.Hour)
	공용.F테스트_참임(테스트, 기본_자료.M신용잔고_기준_결제일.After(일주전) && 
		기본_자료.M신용잔고_기준_결제일.Before(이주후))
	공용.F테스트_참임(테스트, 기본_자료.M신용잔고율 >= 0 && 기본_자료.M신용잔고율 <= 100)

	이백년전 := 지금.Add(-200 * 365 * 24 * time.Hour)
	if 기본_자료.M유상_배정_기준일.Year() > 0 { // 날짜 데이터가 아예 없으면 연도가 0가 됨.
		공용.F테스트_참임(테스트, 기본_자료.M유상_배정_기준일.After(이백년전))
	}

	if 기본_자료.M무상_배정_기준일.Year() > 0 { // 날짜 데이터가 아예 없으면 연도가 0가 됨.
		공용.F테스트_참임(테스트, 기본_자료.M무상_배정_기준일.After(이백년전))
	}

	공용.F테스트_참임(테스트, 기본_자료.M유상_배정_비율 >= 0 && 기본_자료.M유상_배정_비율 <= 100, 기본_자료.M유상_배정_비율)
	공용.F테스트_참임(테스트, 기본_자료.M무상_배정_비율 >= 0 && 기본_자료.M무상_배정_비율 <= 100, 기본_자료.M무상_배정_비율)

	공용.F테스트_참임(테스트, 기본_자료.M상장일.After(이백년전) && 기본_자료.M상장일.Before(지금))
	공용.F테스트_참임(테스트, 기본_자료.M상장_주식수 > 0)

	공용.F테스트_참임(테스트, 기본_자료.M전체_거래원_매도_합계 >= 매도_거래량_합계)
	공용.F테스트_참임(테스트, 기본_자료.M전체_거래원_매수_합계 >= 매수_거래량_합계)
}

func f_ETF_현재가_조회_변동_거래_자료_테스트(테스트 *testing.T,
	기본_자료 *S_ETF_현재가_조회_기본_자료,
	변동_자료_모음 []S_ETF_현재가_조회_변동_거래_자료) {
	/* ETF 용어
	AP : 지정참가회사 (Authorized Participant) 발행시장의 도매업자
	CU : 설정단위 (Credit Unit)
	PDF : 자산 구성 내역(Portfolio Deposit File) ETF 거래의 가장 중요한 지표라고 함.
	      PDF에서 높은 비중을 차지하고 있는 종목의 움직임을 중심으로 살펴보는 것이 좋음.
	            증권형의 경우 최소 10종목 이상이며, 특정 종목이 30% 초과할 수 없음.
	            시가총액순 85/100에 해당하는 구성종목은 시가총액 150억원, 거래대금 1억원 이상.
	            비증권형. 가격이 거래소 시장에서 공정하게 형성되고, 공신력 있는 기관에서 산출하는 지수.
	            원자재 ETF의 경우 대부분 S&P에서 제공하는 관련지수를 사용함.
	LP : 유동성 공급자 (Liquidity Provider). 
	            거래량이 적어도 정상적인 가격 수준으로 원활한 거래가 가능하도록 도와주는 제도.
	            유통시장에서 가장 중충적인 역할을 하는 주체.
	            시장 스프레드 비율 (최우선매도호가 - 최우선매수호가)이 1%(해외는 3%)가 초과되지
	            않도록 무조건 양방향 호가를 제시해야 하는 의무가 있음.
	      LP는 9:05~2:50동안 최소 수량 100좌 이상 의무적으로 호가를 제출해야 함.
        분배금 : '배당금' + 운용상 초과수익. 지급기준일. 기준일 D-2일까지 보유해야 지급대상이 됨.
                      기준일 다음날 '분배락' 발생.
	               배당락 발생 후 나중에 지급될 분배금을 미리 인식해 NAV가 그만큼 상승함.
	*/
	공용.F테스트_참임(테스트, len(변동_자료_모음) > 0, "변동 자료를 수신하지 못함.")

	거래량_잔량 := 기본_자료.M거래량
	지금 := time.Now()

	세시 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 15, 0, 0, 0, 지금.Location())
	네시 := 세시.Add(time.Hour)

	삼분전 := 지금.Add(-3 * time.Minute)
	삼분후 := 지금.Add(3 * time.Minute)

	개장_시각 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 9, 0, 0, 0, 지금.Location())
	거래_마감_시각 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 14, 50, 0, 0, 지금.Location())
	폐장_시각 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 15, 00, 0, 0, 지금.Location())

	금일_0시 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 0, 0, 0, 0, 지금.Location())

	for _, 변동_자료 := range 변동_자료_모음 {
		switch {
		case 변동_자료.M시각.After(삼분후):
			공용.F에러("잘못된 시각. %v", 변동_자료.M시각)
			테스트.FailNow()
		case 변동_자료.M시각.Before(금일_0시): // 과거 자료.
			공용.F테스트_참임(테스트, 변동_자료.M시각.Year() == 0, 변동_자료.M시각)
		case 지금.After(개장_시각) && 지금.Before(폐장_시각): // 장중
			// 컴퓨터 시계에 오차가 존재하니 약간 여유를 둬야 함.
			공용.F테스트_참임(테스트, 변동_자료.M시각.After(삼분전) && 변동_자료.M시각.Before(삼분후), 변동_자료.M시각, 삼분전, 삼분후)
		default: // 장 마감
			공용.F테스트_참임(테스트, 변동_자료.M시각.After(세시) && 변동_자료.M시각.Before(네시), 변동_자료.M시각)
		}

		공용.F테스트_참임(테스트, 변동_자료.M현재가 <= 기본_자료.M상한가)
		공용.F테스트_참임(테스트, 변동_자료.M현재가 >= 기본_자료.M하한가)
		공용.F테스트_참임(테스트, f올바른_등락부호(변동_자료.M등락부호))
		공용.F테스트_같음(테스트, f등락부호2정수(변동_자료.M등락부호)*변동_자료.M등락폭,
			변동_자료.M현재가-기본_자료.M전일_종가)

		if 지금.After(개장_시각) && 지금.Before(거래_마감_시각) { // 장중
			// 시장가 주문은 체결 중에는 호가가 변하지 않는다.
			// 시장가 주문이 체결 중에는 최우선 호가를 넘어서서 계속 진행 중일 수 있다.
			공용.F테스트_참임(테스트, 변동_자료.M매도_호가 >= 변동_자료.M현재가, 변동_자료.M매도_호가, 변동_자료.M현재가)
			공용.F테스트_참임(테스트, 변동_자료.M매수_호가 <= 변동_자료.M현재가, 변동_자료.M매수_호가, 변동_자료.M현재가)
		} else {
			// 장 마감 후 매도호가, 매수호가가 흔히 생각하는 조건을 만족시키지 않음.
			if 변동_자료.M매도_호가 > 0 {
				//공용.F테스트_참임(테스트, 변동_자료.M매도_호가 >= 변동_자료.M현재가, 변동_자료.M매도_호가, 변동_자료.M현재가)
				공용.F테스트_참임(테스트, 공용.F오차율(변동_자료.M매도_호가, 변동_자료.M현재가) <= 10,
					변동_자료.M매도_호가, 변동_자료.M현재가)

			}

			if 변동_자료.M매수_호가 > 0 {
				//공용.F테스트_참임(테스트, 변동_자료.M매수_호가 <= 변동_자료.M현재가, 변동_자료.M매수_호가, 변동_자료.M현재가)
				공용.F테스트_참임(테스트, 공용.F오차율(변동_자료.M매수_호가, 변동_자료.M현재가) <= 10,
					변동_자료.M매수_호가, 변동_자료.M현재가)
			}
		}

		공용.F테스트_같음(테스트, 변동_자료.M거래량, 거래량_잔량)
		거래량_잔량 -= 변동_자료.M변동_거래량
	}
}

func f_ETF_현재가_조회_동시호가_자료_테스트(테스트 *testing.T,
	기본_자료 *S_ETF_현재가_조회_기본_자료,
	동시호가_자료 *S_ETF_현재가_조회_동시호가) {
	공용.F테스트_참임(테스트, 동시호가_자료 != nil)
	공용.F테스트_참임(테스트, 동시호가_자료.M동시호가_구분 >= 0 && 동시호가_자료.M동시호가_구분 <= 6)

	switch 동시호가_자료.M동시호가_구분 {
	case 0: // 동시호가 아님.
		break
	default:
		공용.F변수값_확인(기본_자료.M시각, 기본_자료.M종목_코드, 동시호가_자료.M동시호가_구분)
		공용.F테스트_참임(테스트, f올바른_등락부호(동시호가_자료.M예상_체결_부호), 동시호가_자료.M예상_체결_부호)
		공용.F테스트_참임(테스트, 동시호가_자료.M예상_체결가 <= 기본_자료.M상한가)

		공용.F테스트_참임(테스트, 동시호가_자료.M예상_체결가 >= 기본_자료.M하한가, 동시호가_자료.M예상_체결가, 기본_자료.M하한가)
		공용.F테스트_참임(테스트, 공용.F오차율(동시호가_자료.M예상_체결가, 기본_자료.M현재가) < 10)
		공용.F테스트_같음(테스트, f등락부호2정수(동시호가_자료.M예상_체결_부호)*동시호가_자료.M예상_등락폭,
			동시호가_자료.M예상_체결가-기본_자료.M전일_종가)

		if 동시호가_자료.M예상_등락폭 != 0 && 동시호가_자료.M예상_등락율 != 0 {
			예상_등락율_근사값 := math.Abs(float64(동시호가_자료.M예상_등락폭)) /
				float64(동시호가_자료.M예상_체결가) * 100
			공용.F테스트_참임(테스트, 공용.F오차율(동시호가_자료.M예상_등락율, 예상_등락율_근사값) < 10)
		}

		공용.F테스트_참임(테스트, 동시호가_자료.M예상_체결_수량 >= 0)
	}
}

func f_ETF_현재가_조회_ETF_자료_테스트(테스트 *testing.T,
	기본_자료 *S_ETF_현재가_조회_기본_자료,
	ETF_자료 *S_ETF_현재가_조회_ETF자료) {
	공용.F테스트_참임(테스트, ETF_자료 != nil)

	공용.F문자열_출력("ETF 구분 %v", ETF_자료.ETF구분)
	공용.F테스트_참임(테스트, ETF_자료.NAV > 0, ETF_자료.NAV)
	공용.F테스트_참임(테스트, f올바른_등락부호(ETF_자료.NAV등락부호))

	공용.F문자열_출력("ETF NAV 등락폭 %v", ETF_자료.NAV등락폭)
	NAV_근사값 := ETF_자료.M전일NAV + float64(f등락부호2정수(ETF_자료.NAV등락부호))*ETF_자료.NAV등락폭
	공용.F테스트_참임(테스트, 공용.F오차율(ETF_자료.NAV, NAV_근사값) < 3)

	공용.F문자열_출력("ETF 괴리율 %v", ETF_자료.M괴리율)

	공용.F테스트_참임(테스트, math.Abs(float64(ETF_자료.M괴리율)) < 10, ETF_자료.M괴리율)

	괴리율_근사값 := math.Abs(float64(기본_자료.M현재가)-ETF_자료.NAV) / float64(ETF_자료.NAV) * 100
	공용.F테스트_참임(테스트, 공용.F오차율(ETF_자료.M괴리율, 괴리율_근사값) < 1, ETF_자료.M괴리율, 괴리율_근사값)

	공용.F테스트_참임(테스트, f올바른_등락부호(ETF_자료.M괴리율_부호), ETF_자료.M괴리율_부호)
	f테스트_등락율(테스트, ETF_자료.M괴리율_부호, ETF_자료.M괴리율)

	공용.F테스트_참임(테스트, ETF_자료.M설정단위_당_현금_배당액 >= 0)
	공용.F테스트_참임(테스트, ETF_자료.M구성_종목수 > 0)
	공용.F테스트_참임(테스트, ETF_자료.M순자산_총액_억 > 0)

	순자산_총액_근사값_1 := float64(기본_자료.M시가_총액_억) * 
		(1 + float64(f등락부호2정수(ETF_자료.M괴리율_부호))*ETF_자료.M괴리율)
	순자산_총액_근사값_2 := float64(기본_자료.M시가_총액_억) * 
		(1 - float64(f등락부호2정수(ETF_자료.M괴리율_부호))*ETF_자료.M괴리율)

	공용.F테스트_참임(테스트, 공용.F오차율(ETF_자료.M순자산_총액_억, 순자산_총액_근사값_1) < 3 ||
		공용.F오차율(ETF_자료.M순자산_총액_억, 순자산_총액_근사값_2) < 3,
		ETF_자료.M순자산_총액_억, 순자산_총액_근사값_1, 순자산_총액_근사값_2)

	// 추적 오차율 : 지수와 NAV의 수익률 차이.
	공용.F테스트_참임(테스트, math.Abs(float64(ETF_자료.M추적_오차율)) < 6, ETF_자료.M추적_오차율)

	for i, 매도_잔량 := range ETF_자료.LP_매도_잔량_모음 {
		if ETF_자료.LP_매도_잔량_모음[i+1] > 0 {
			공용.F테스트_참임(테스트, 매도_잔량 > 0, 
				매도_잔량, ETF_자료.LP_매도_잔량_모음[i+1])
		}
	}
	
	for i, 매수_잔량 := range ETF_자료.LP_매수_잔량_모음 {
		if ETF_자료.LP_매수_잔량_모음[i+1] > 0 {
			공용.F테스트_참임(테스트, 매수_잔량 > 0, 
				매수_잔량, ETF_자료.LP_매수_잔량_모음[i+1])
		}
	}

	공용.F문자열_출력("ETF 복제 방법 구분 코드 %v", ETF_자료.ETF_복제_방법_구분_코드)
	공용.F문자열_출력("ETF 상품 유형 코드 %v", ETF_자료.ETF_상품_유형_코드)
}

func f_ETF_현재가_조회_지수_자료_테스트(테스트 *testing.T,
	기본_자료 *S_ETF_현재가_조회_기본_자료,
	지수_자료 *S_ETF_현재가_조회_지수_자료) {
	공용.F문자열_출력("지수 코드 %v", 지수_자료.M지수_코드)
	공용.F문자열_출력("섹터 코드 %v", 지수_자료.M업종_코드)
	공용.F문자열_출력("지수 이름 %v", 지수_자료.M지수_이름)

	공용.F테스트_참임(테스트, utf8.ValidString(지수_자료.M업종_코드))
	공용.F테스트_참임(테스트, utf8.ValidString(지수_자료.M지수_이름))
	공용.F테스트_참임(테스트, 지수_자료.M코스피200 > 0)
	공용.F테스트_참임(테스트, f올바른_등락부호(지수_자료.M코스피200_등락부호))
	공용.F테스트_참임(테스트, 지수_자료.M코스피200_등락폭 >= 0) // 절대값?
	공용.F테스트_참임(테스트, 지수_자료.M채권_지수 > 0)       // 이건 뭐지?
	공용.F테스트_참임(테스트, f올바른_등락부호(지수_자료.M채권_지수_등락부호))
	공용.F테스트_참임(테스트, 지수_자료.M채권_지수_등락폭 >= 0)

	공용.F문자열_출력("해외 지수 코드 %v", 지수_자료.M해외_지수_코드)
	공용.F문자열_출력("기타 업종 코드 %v", 지수_자료.M기타_업종_코드)
	공용.F문자열_출력("채권 지수 코드 %v", 지수_자료.M채권_지수_코드)
	공용.F문자열_출력("채권 지수 세부 코드 %v", 지수_자료.M채권_지수_세부_코드)

	공용.F테스트_참임(테스트, utf8.ValidString(지수_자료.M해외_지수_코드))
	공용.F테스트_참임(테스트, utf8.ValidString(지수_자료.M기타_업종_코드))
	공용.F테스트_참임(테스트, utf8.ValidString(지수_자료.M채권_지수_코드))
	공용.F테스트_참임(테스트, utf8.ValidString(지수_자료.M채권_지수_세부_코드))
}
