package internal

import (
	공용 "github.com/ghts/ghts/common"

	"math"
	"strings"
	"testing"
	"time"
	"unicode/utf8"
	"unsafe"
)

func TestCh조회_ETF_현재가(테스트 *testing.T) {
	f접속_확인()

	종목 := 공용.F임의_종목_ETF()
	질의 := 공용.New질의_가변형(P30초, 공용.P메시지_GET, TR_ETF_현재가_조회, 종목.G코드())
	질의.S질의(Ch조회)

	기본_자료 := new(S_ETF_현재가_조회_기본_자료)
	기본_자료 = nil

	변동_자료_모음 := make([]S_ETF_현재가_조회_변동_거래_자료, 0)

	동시호가_자료 := new(S_ETF_현재가_조회_동시호가)
	동시호가_자료 = nil

	ETF_자료 := new(S_ETF_현재가_조회_ETF자료)
	ETF_자료 = nil

	지수_자료 := new(S_ETF_현재가_조회_지수_자료)
	지수_자료 = nil

	ok := true
	완료_메시지_수신 := false

	for !완료_메시지_수신 || 기본_자료 == nil {
		회신 := 질의.G회신()
		공용.F테스트_에러없음(테스트, 회신.G에러())

		switch 회신.G구분() {
		case P회신_조회:
			공용.F테스트_같음(테스트, 회신.G길이(), 1)

			수신_데이터, ok := 회신.G내용(0).(S수신_데이터)
			공용.F테스트_참임(테스트, ok)

			switch 수신_데이터.G블록_이름() {
			case "c1151OutBlock":
				공용.F테스트_같음(테스트, 수신_데이터.G길이(),
					int(unsafe.Sizeof(Tc1151OutBlock{})))
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				기본_자료, ok = 수신_데이터.G데이터().(*S_ETF_현재가_조회_기본_자료)
				공용.F테스트_참임(테스트, ok)
			case "c1151OutBlock2":
				공용.F테스트_참임(테스트, 수신_데이터.G길이()%
					int(unsafe.Sizeof(Tc1151OutBlock2{})) == 0)
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				변동_자료_모음, ok = 수신_데이터.G데이터().([]S_ETF_현재가_조회_변동_거래_자료)
				공용.F테스트_참임(테스트, ok)
			case "c1151OutBlock3":
				공용.F테스트_같음(테스트, 수신_데이터.G길이(),
					int(unsafe.Sizeof(Tc1151OutBlock3{})))
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				동시호가_자료, ok = 수신_데이터.G데이터().(*S_ETF_현재가_조회_동시호가)
				공용.F테스트_참임(테스트, ok)
			case "c1151OutBlock4":
				공용.F테스트_같음(테스트, 수신_데이터.G길이(),
					int(unsafe.Sizeof(Tc1151OutBlock4{})))
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				ETF_자료, ok = 수신_데이터.G데이터().(*S_ETF_현재가_조회_ETF자료)
				공용.F테스트_참임(테스트, ok)
			case "c1151OutBlock5":
				공용.F테스트_같음(테스트, 수신_데이터.G길이(),
					int(unsafe.Sizeof(Tc1151OutBlock5{})))
				공용.F테스트_다름(테스트, 수신_데이터.G데이터(), nil)

				지수_자료, ok = 수신_데이터.G데이터().(*S_ETF_현재가_조회_지수_자료)
				공용.F테스트_참임(테스트, ok)
			default:
				공용.F문자열_출력("예상치 못한 블록 이름 %v", 수신_데이터.G블록_이름())
				테스트.FailNow()
			}
		case P회신_메시지:
			공용.F테스트_같음(테스트, 회신.G길이(), 2)

			_, ok = 회신.G내용(0).(string) // 코드
			공용.F테스트_참임(테스트, ok)

			메시지, ok := 회신.G내용(1).(string)
			공용.F테스트_참임(테스트, ok)

			공용.F테스트_참임(테스트, 
				strings.Contains(메시지, "TRU") ||
				strings.Contains(메시지, "조회완료") || 
				strings.Contains(메시지, "정보가 없습니다"))
		case P회신_완료:
			공용.F테스트_같음(테스트, 회신.G길이(), 1)

			수신_데이터, ok := 회신.G내용(0).(S수신_데이터)
			공용.F테스트_참임(테스트, ok)
			공용.F테스트_같음(테스트, 수신_데이터.G블록_이름(), "c1151")
			공용.F테스트_같음(테스트, 수신_데이터.G길이(), 0)
			공용.F테스트_같음(테스트, 수신_데이터.G데이터(), nil)

			완료_메시지_수신 = true
		case P회신_에러:
			공용.F에러("P회신_에러 수신")
			테스트.FailNow()
		default:
			공용.F문자열_출력("\n*** %v 예상치 못한 회신 구분 : %v ***", 회신.G구분())
			공용.F변수값_확인(회신.G구분())
			공용.F변수값_확인(회신)
			테스트.FailNow()
		}
	}
	
	공용.F문자열_출력("*** 종목코드 %v ***", 종목.G코드())
	공용.F문자열_출력("*** 시각 %v ***", 기본_자료.M시각)

	// 기본 자료 테스트
	f_ETF_현재가_조회_기본_자료_테스트(테스트, 기본_자료, 종목)

	// 변동 자료 테스트
	f_ETF_현재가_조회_변동_거래_자료_테스트(테스트, 기본_자료, 변동_자료_모음)

	// 동시호가 자료 테스트
	f_ETF_현재가_조회_동시호가_자료_테스트(테스트, 기본_자료, 동시호가_자료)

	// ETF 자료 테스트
	f_ETF_현재가_조회_ETF자료_테스트(테스트, 기본_자료, ETF_자료)

	// 기반 지수 자료 테스트
	f_ETF_현재가_조회_지수_자료_테스트(테스트, 기본_자료, ETF_자료, 지수_자료)
}

func f_ETF_현재가_조회_기본_자료_테스트(테스트 *testing.T,
	s *S_ETF_현재가_조회_기본_자료, 종목 공용.I종목) {
	지금 := time.Now()
	금일_0시 := time.Date(지금.Year(), 지금.Month(), 지금.Day(), 0,0,0,0, 지금.Location())
	삼분후 := 지금.Add(3 * time.Minute)
	최근_개장일, 에러 := 공용.F한국증시_최근_개장일()
	공용.F에러_패닉(에러)
	
	//일주전 := 지금.Add(-7 * 24 * time.Hour)
	//일년전 := time.Date(지금.Year()-1, 지금.Month(), 지금.Day(), 0, 0, 0, 0, 지금.Location())
	이백년전 := 지금.Add(-200 * 365 * 24 * time.Hour)

	공용.F테스트_참임(테스트, s != nil, "기본 자료를 수신하지 못함.")
	공용.F테스트_같음(테스트, s.M종목_코드, 종목.G코드())
	공용.F테스트_참임(테스트, utf8.ValidString(s.M종목명))
	
	공백제거_종목명_수신값 := strings.Replace(s.M종목명, " ", "", -1)
	공백제거_종목명_비교값 := strings.Replace(종목.G이름(), " ", "", -1)
	공용.F테스트_참임(테스트, 
		strings.Contains(공백제거_종목명_수신값, 공백제거_종목명_비교값) ||
		strings.Contains(공백제거_종목명_비교값, 공백제거_종목명_수신값),
		공백제거_종목명_수신값, 공백제거_종목명_비교값)
	공용.F테스트_참임(테스트, s.M등락율 >= 0) // 절대값임.

	f테스트_등락부호(테스트, s.M등락부호, s.M현재가, s.M전일_종가, s.M상한가, s.M하한가)
	공용.F테스트_같음(테스트, s.M현재가,
		s.M전일_종가+f등락부호2정수(s.M등락부호)*s.M등락폭)

	if s.M현재가 != 0 && s.M등락폭 != 0 && s.M등락율 != 0 {
		등락율_근사값 := math.Abs(float64(s.M등락폭)) / float64(s.M현재가) * 100
		공용.F테스트_참임(테스트, 공용.F오차율(s.M등락율, 등락율_근사값) < 10 ||
			공용.F오차(s.M등락율, 등락율_근사값) < 0.1,
			s.M등락율, 등락율_근사값, s.M등락폭, s.M현재가)
	}

	공용.F테스트_참임(테스트, s.M거래량 >= 0)
	공용.F테스트_참임(테스트, s.M전일대비_거래량_비율 >= 0)

	if s.M유동_주식수_1000주 != 0 {
		유동주_회전율_근사값 := float64(s.M거래량) /
			float64(s.M유동_주식수_1000주*1000) * 100
		유동주_회전율_근사값 = math.Trunc(유동주_회전율_근사값*100) / 100
		공용.F테스트_참임(테스트, 
			공용.F오차(s.M유동주_회전율, 유동주_회전율_근사값) < 1 ||
			공용.F오차율(s.M유동주_회전율, 유동주_회전율_근사값) < 10,
			s.M유동주_회전율, 유동주_회전율_근사값)
	}

	if s.M거래대금_100만 != 0 && s.M거래량 != 0 && s.M현재가 != 0 {
		거래대금_근사값 := s.M거래량 * s.M현재가 / 1000000
		공용.F테스트_참임(테스트, 공용.F오차율(s.M거래대금_100만, 거래대금_근사값) < 10)
	}

	if s.M거래량 > 0 {
		// 거래량이 0이면 저가, 고가 모두 0임.
		공용.F테스트_참임(테스트, s.M상한가 >= s.M고가, s.M상한가)
		공용.F테스트_참임(테스트, s.M고가 >= s.M시가, s.M시가, s.M고가)
		공용.F테스트_참임(테스트, s.M고가 >= s.M저가, s.M저가, s.M고가)
		공용.F테스트_참임(테스트, s.M저가 <= s.M시가, s.M저가, s.M시가)
		공용.F테스트_참임(테스트, s.M저가 >= s.M하한가, s.M하한가, s.M저가)
		공용.F테스트_참임(테스트, s.M현재가 <= s.M고가, s.M현재가, s.M고가)
		공용.F테스트_참임(테스트, s.M현재가 >= s.M저가, s.M저가, s.M현재가)
	}
	 
	공용.F테스트_참임(테스트, s.M하한가 >= 0, s.M하한가)
	공용.F테스트_참임(테스트, s.M52주_고가 >= s.M20일_고가)
	공용.F테스트_참임(테스트, s.M20일_고가 >= s.M5일_고가)
	공용.F테스트_참임(테스트, s.M5일_고가 >= s.M5일_저가)
	공용.F테스트_참임(테스트, s.M20일_저가 >= s.M52주_저가)
	공용.F테스트_참임(테스트, s.M5일_저가 >= s.M20일_저가)
	공용.F테스트_참임(테스트, s.M시각.After(최근_개장일), s.M시각)
	공용.F테스트_참임(테스트, s.M시각.Before(최근_개장일.Add(16*time.Hour)))
		
	if 공용.F한국증시_장중() {
		공용.F테스트_참임(테스트, s.M시각.Before(삼분후))
	} else {
		공용.F테스트_참임(테스트, s.M시각.Hour() == 15, s.M시각)
	}
	
	f테스트_등락부호(테스트, s.M시가대비_등락부호, s.M현재가, s.M시가, s.M상한가, s.M하한가)
	공용.F테스트_참임(테스트, s.M시가+s.M시가대비_등락폭 == s.M현재가,
		s.M시가, s.M현재가, s.M시가대비_등락폭) // 시가대비_등락폭 자체에 부호가 반영되어 있음.
	
	for i, 매도_잔량 := range s.M매도_잔량_모음 {
		공용.F테스트_참임(테스트, 매도_잔량 >= 0)
		
		if 매도_잔량 == 0 {
			continue
		}
		
		// 매도_잔량 > 0
		매도_호가 := s.M매도_호가_모음[i]
		공용.F테스트_참임(테스트, 매도_호가 <= s.M상한가)
		공용.F테스트_참임(테스트, 매도_호가 >= s.M하한가)
		
		if i == 0 {
			공용.F테스트_참임(테스트, 매도_호가 >= s.M현재가)
		} else {
			공용.F테스트_참임(테스트, 매도_호가 > s.M매도_호가_모음[i-1])
		}
	}
	
	for i, 매수_잔량 := range s.M매수_잔량_모음 {
		공용.F테스트_참임(테스트, 매수_잔량 >= 0)
		
		if 매수_잔량 == 0 { 
			continue
		}
		
		// 매수_잔량 > 0
		매수_호가 := s.M매수_호가_모음[i]
		공용.F테스트_참임(테스트, 매수_호가 <= s.M상한가)
		공용.F테스트_참임(테스트, 매수_호가 >= s.M하한가)
		
		if i == 0 {
			공용.F테스트_참임(테스트, 매수_호가 >= s.M현재가)
		} else {
			공용.F테스트_참임(테스트, 매수_호가 < s.M매수_호가_모음[i-1],
				매수_호가, s.M매수_호가_모음[i-1], i)
		}
	}
	
	공용.F테스트_참임(테스트, s.M시간외_매도_잔량 >= 0)
	공용.F테스트_참임(테스트, s.M시간외_매수_잔량 >= 0)
	공용.F테스트_참임(테스트, s.M피봇_2차_저항 >= s.M피봇_1차_저항,
		s.M피봇_2차_저항, s.M피봇_1차_저항)
	공용.F테스트_참임(테스트, s.M피봇_1차_저항 >= s.M피봇_가격)
	공용.F테스트_참임(테스트, s.M피봇_가격 >= s.M피봇_1차_지지)
	공용.F테스트_참임(테스트, s.M피봇_1차_지지 >= s.M피봇_2차_지지)
	공용.F테스트_참임(테스트, utf8.ValidString(s.M시장_구분))
	공용.F테스트_같음(테스트, s.M시장_구분, "코스피", "코스닥")
	공용.F테스트_참임(테스트, utf8.ValidString(s.M업종명))
	공용.F테스트_참임(테스트, utf8.ValidString(s.M자본금_규모))
	공용.F테스트_참임(테스트, s.M자본금_규모 == "", s.M자본금_규모)
	공용.F테스트_참임(테스트, utf8.ValidString(s.M결산월))
	공용.F테스트_참임(테스트, strings.Contains(s.M결산월, "월 결산"))
	
	for _, 추가_정보 := range s.M추가_정보_모음 {
		공용.F테스트_참임(테스트, utf8.ValidString(추가_정보))
	}
	
	공용.F테스트_같음(테스트, s.M서킷_브레이커_구분, "", "CB발동", "CB해제", "장종료")
	공용.F테스트_참임(테스트, s.M액면가 ==0, s.M액면가)	// ETF는 액면가가 없는 건가?
	공용.F테스트_참임(테스트, 공용.F오차율(s.M상한가, float64(s.M전일_종가)*1.3) < 5)
	공용.F테스트_참임(테스트, 공용.F오차율(s.M하한가, float64(s.M전일_종가)*0.7) < 5)
	공용.F테스트_참임(테스트, s.M대용가 < s.M전일_종가)
	공용.F테스트_참임(테스트, s.M대용가 > int64(float64(s.M전일_종가)*0.5))
	공용.F테스트_참임(테스트, s.M공모가 >= 0)
	공용.F테스트_참임(테스트, s.M유동_주식수_1000주 >= 0)

	시가총액_근사값 := s.M현재가 * s.M상장_주식수 / 100000000
	공용.F테스트_참임(테스트, 공용.F오차율(s.M시가_총액_억, 시가총액_근사값) < 10)
	공용.F테스트_참임(테스트, s.M거래원_정보_수신_시각.Before(삼분후))
	공용.F테스트_참임(테스트, s.M거래원_정보_수신_시각.After(최근_개장일.Add(9*time.Hour)))
	공용.F테스트_참임(테스트, s.M거래원_정보_수신_시각.Before(최근_개장일.Add(16*time.Hour)))
	
	매도_거래량_합계 := int64(0)
	for i, 매도_거래량 := range s.M매도_거래량_모음 {
		공용.F테스트_참임(테스트, 매도_거래량 >= 0, i, 매도_거래량)
		
		if 매도_거래량 == 0 { 
			continue
		}
		
		매도_거래량_합계 += 매도_거래량
		매도_거래원 := s.M매도_거래원_모음[i]
		공용.F테스트_참임(테스트, len(매도_거래원) > 0)
		공용.F테스트_참임(테스트, utf8.ValidString(매도_거래원), 매도_거래원)	
	}
	
	매수_거래량_합계 := int64(0)
	for i, 매수_거래량 := range s.M매수_거래량_모음 {
		공용.F테스트_참임(테스트, 매수_거래량 >= 0, i, 매수_거래량)
		
		if 매수_거래량 == 0 { 
			continue
		}
		
		매수_거래량_합계 += 매수_거래량
		매수_거래원 := s.M매수_거래원_모음[i]
		공용.F테스트_참임(테스트, len(매수_거래원) > 0)
		공용.F테스트_참임(테스트, utf8.ValidString(매수_거래원), 매수_거래원)
	}
	
	공용.F테스트_참임(테스트, s.M외국인_매도_거래량 >= 0)
	공용.F테스트_참임(테스트, s.M외국인_매수_거래량 >= 0)
	공용.F테스트_참임(테스트, s.M외국인_시간.After(최근_개장일), s.M외국인_시간)
	공용.F테스트_참임(테스트, s.M외국인_시간.Before(최근_개장일.Add(23*time.Hour)), s.M외국인_시간)
	공용.F테스트_참임(테스트, s.M외국인_지분율 >= 0 && s.M외국인_지분율 <= 100)
	공용.F테스트_참임(테스트, s.M신용잔고율 >= 0)
	공용.F테스트_참임(테스트, s.M신용잔고율 <= 100)
	//공용.F테스트_참임(테스트, s.M유상_기준일.After(이백년전) || s.M유상_기준일.IsZero(), s.M유상_기준일)
	//공용.F테스트_참임(테스트, s.M무상_기준일.After(이백년전) || s.M무상_기준일.IsZero(), s.M무상_기준일)
	공용.F테스트_참임(테스트, s.M유상_배정_비율 >= 0)
	공용.F테스트_참임(테스트, s.M유상_배정_비율 <= 100)
	공용.F테스트_참임(테스트, s.M무상_배정_비율 >= 0)
	공용.F테스트_참임(테스트, s.M무상_배정_비율 <= 100)
	공용.F테스트_참임(테스트, s.M상장일.After(이백년전))
	공용.F테스트_참임(테스트, s.M상장일.Before(금일_0시))
	공용.F테스트_참임(테스트, s.M상장_주식수 > 0)
	공용.F테스트_참임(테스트, s.M전체_거래원_매도_합계 >= 매도_거래량_합계)
	공용.F테스트_참임(테스트, s.M전체_거래원_매수_합계 >= 매수_거래량_합계)
}

func f_ETF_현재가_조회_변동_거래_자료_테스트(테스트 *testing.T,
	기본_자료 *S_ETF_현재가_조회_기본_자료,
	변동_자료_모음 []S_ETF_현재가_조회_변동_거래_자료) {
	/* ETF 용어
	AP : 지정참가회사 (Authorized Participant) 발행시장의 도매업자
	CU : 설정단위 (Credit Unit)
	PDF : 자산 구성 내역(Portfolio Deposit File) ETF 거래의 가장 중요한 지표라고 함.
	      PDF에서 높은 비중을 차지하고 있는 종목의 움직임을 중심으로 살펴보는 것이 좋음.
	            증권형의 경우 최소 10종목 이상이며, 특정 종목이 30% 초과할 수 없음.
	            시가총액순 85/100에 해당하는 구성종목은 시가총액 150억원, 거래대금 1억원 이상.
	            비증권형. 가격이 거래소 시장에서 공정하게 형성되고, 공신력 있는 기관에서 산출하는 지수.
	            원자재 ETF의 경우 대부분 S&P에서 제공하는 관련지수를 사용함.
	LP : 유동성 공급자 (Liquidity Provider). 
	            거래량이 적어도 정상적인 가격 수준으로 원활한 거래가 가능하도록 도와주는 제도.
	            유통시장에서 가장 중충적인 역할을 하는 주체.
	            시장 스프레드 비율 (최우선매도호가 - 최우선매수호가)이 1%(해외는 3%)가 초과되지
	            않도록 무조건 양방향 호가를 제시해야 하는 의무가 있음.
	      LP는 9:05~2:50동안 최소 수량 100좌 이상 의무적으로 호가를 제출해야 함.
        분배금 : '배당금' + 운용상 초과수익. 지급기준일. 기준일 D-2일까지 보유해야 지급대상이 됨.
                      기준일 다음날 '분배락' 발생.
	               배당락 발생 후 나중에 지급될 분배금을 미리 인식해 NAV가 그만큼 상승함. */

	공용.F테스트_참임(테스트, len(변동_자료_모음) > 0, "변동 자료를 수신하지 못함.")

	거래량_잔량 := 기본_자료.M거래량
	지금 := time.Now()
	삼분후 := 지금.Add(3 * time.Minute)
	최근_개장일, 에러 := 공용.F한국증시_최근_개장일()
	공용.F에러_패닉(에러)

	for _, s := range 변동_자료_모음 {
		공용.F테스트_참임(테스트, s.M시각.Before(삼분후))
		공용.F테스트_참임(테스트, s.M시각.After(최근_개장일.Add(9*time.Hour)))
		공용.F테스트_참임(테스트, s.M시각.Before(최근_개장일.Add(16*time.Hour)))
		
		if 공용.F한국증시_장중() {
			공용.F테스트_참임(테스트, s.M시각.Before(삼분후))
		} else {
			공용.F테스트_참임(테스트, s.M시각.Hour() >= 9, s.M시각)
			공용.F테스트_참임(테스트, s.M시각.Hour() <= 16, s.M시각)
		}

		공용.F테스트_참임(테스트, s.M현재가 <= 기본_자료.M상한가)
		공용.F테스트_참임(테스트, s.M현재가 >= 기본_자료.M하한가)
		공용.F테스트_참임(테스트, f올바른_등락부호(s.M등락부호))
		공용.F테스트_같음(테스트, f등락부호2정수(s.M등락부호)*s.M등락폭,
			s.M현재가-기본_자료.M전일_종가)

		if 공용.F한국증시_장중() {
			공용.F테스트_참임(테스트, s.M매도_호가 >= s.M현재가 ||
				s.M매도_호가 == 0, s.M매도_호가, s.M현재가)
			공용.F테스트_참임(테스트, s.M매수_호가 <= s.M현재가 ||
				s.M매수_호가 == 0, s.M매수_호가, s.M현재가)
		} else {
			if s.M매도_호가 > 0 {
				공용.F테스트_참임(테스트, s.M매도_호가 <= 기본_자료.M상한가)
				공용.F테스트_참임(테스트, s.M매도_호가 >= 기본_자료.M하한가)
			}

			if s.M매수_호가 > 0 {
				공용.F테스트_참임(테스트, s.M매수_호가 <= 기본_자료.M상한가)
				공용.F테스트_참임(테스트, s.M매수_호가 >= 기본_자료.M하한가)
			}
		}

		공용.F테스트_같음(테스트, s.M거래량, 거래량_잔량)
		거래량_잔량 -= s.M변동_거래량
	}
}

func f_ETF_현재가_조회_동시호가_자료_테스트(테스트 *testing.T,
	기본_자료 *S_ETF_현재가_조회_기본_자료,
	s *S_ETF_현재가_조회_동시호가) {
	공용.F테스트_참임(테스트, s != nil)
	공용.F테스트_같음(테스트, int(s.M동시호가_구분), 0,1,2,3,4,5,6)

	if s.M동시호가_구분 == 0 {
		return
	}
	
	공용.F변수값_확인(기본_자료.M시각, 기본_자료.M종목_코드, s.M동시호가_구분)
	공용.F테스트_참임(테스트, f올바른_등락부호(s.M예상_체결_부호), s.M예상_체결_부호)
	공용.F테스트_참임(테스트, s.M예상_체결가 <= 기본_자료.M상한가)

	공용.F테스트_참임(테스트, s.M예상_체결가 >= 기본_자료.M하한가, s.M예상_체결가, 기본_자료.M하한가)
	공용.F테스트_참임(테스트, 공용.F오차율(s.M예상_체결가, 기본_자료.M현재가) < 10)
	공용.F테스트_같음(테스트, f등락부호2정수(s.M예상_체결_부호)*s.M예상_등락폭,
		s.M예상_체결가-기본_자료.M전일_종가)

	if s.M예상_등락폭 != 0 && s.M예상_등락율 != 0 {
		예상_등락율_계산값 := 공용.F절대값(s.M예상_등락폭) /
			float64(s.M예상_체결가) * 100
		공용.F테스트_참임(테스트, 공용.F오차율(s.M예상_등락율, 예상_등락율_계산값) < 10)
	}

	공용.F테스트_참임(테스트, s.M예상_체결_수량 >= 0)
}

func f_ETF_현재가_조회_ETF자료_테스트(테스트 *testing.T,
	기본_자료 *S_ETF_현재가_조회_기본_자료,
	s *S_ETF_현재가_조회_ETF자료) {
	공용.F테스트_참임(테스트, s != nil)
	공용.F테스트_같음(테스트, s.ETF구분, P코스피, P코스닥)
	공용.F테스트_참임(테스트, s.NAV > 0, s.NAV)
	공용.F테스트_참임(테스트, f올바른_등락부호(s.NAV등락부호))
	
	NAV_근사값 := s.M전일NAV + float64(f등락부호2정수(s.NAV등락부호))*s.NAV등락폭
	공용.F테스트_참임(테스트, 공용.F오차율(s.NAV, NAV_근사값) < 3)
	공용.F테스트_참임(테스트, math.Abs(float64(s.M괴리율)) < 10, s.M괴리율)

	괴리율_계산값 := 공용.F절대값(float64(기본_자료.M현재가)-s.NAV) / float64(s.NAV) * 100
	오차율 := 공용.F오차율(s.M괴리율, 괴리율_계산값)
	오차 := math.Abs(s.M괴리율 - 괴리율_계산값)
	
	공용.F메모("NAV 산출시간을 알게 되면 괴리율 검사 오차를 줄일 것.")
	공용.F테스트_참임(테스트, 오차율 < 5 || 오차 < 2, 
		s.NAV, 기본_자료.M현재가, 괴리율_계산값, s.M괴리율)

	공용.F테스트_참임(테스트, f올바른_등락부호(s.M괴리율_부호), s.M괴리율_부호)
	//공용.F변수값_확인(s.M괴리율_부호, s.M괴리율)
	//f테스트_등락율(테스트, s.M괴리율_부호, s.M괴리율)
	공용.F테스트_참임(테스트, s.M괴리율 >= 0, s.M괴리율)

	공용.F테스트_참임(테스트, s.M설정단위_당_현금_배당액 >= 0)
	공용.F테스트_참임(테스트, s.M구성_종목수 > 0)
	공용.F테스트_참임(테스트, s.M순자산_총액_억 > 0)

	순자산_총액_억 := float64(s.M순자산_총액_억)
	시가_총액_억 := float64(기본_자료.M시가_총액_억)
	
	시가_총액_억_계산값_1 := 순자산_총액_억 * (1 + 
		float64(f등락부호2정수(s.M괴리율_부호)) * math.Abs(s.M괴리율/100))
	시가_총액_억_계산값_2 := 순자산_총액_억 * (1 - 
		float64(f등락부호2정수(s.M괴리율_부호)) * math.Abs(s.M괴리율/100))
	
	순자산_총액_억_계산값_1 := 시가_총액_억 * (1 +
		float64(f등락부호2정수(s.M괴리율_부호)) * math.Abs(s.M괴리율/100))
	순자산_총액_억_계산값_2 := 시가_총액_억 * (1 -
		float64(f등락부호2정수(s.M괴리율_부호)) * math.Abs(s.M괴리율/100))
	
	공용.F메모("NAV 산출시간을 알게 되면 괴리율 검사 오차를 줄일 것.")
	공용.F테스트_참임(테스트,
		공용.F오차율(순자산_총액_억, 순자산_총액_억_계산값_1) < 3 ||
		공용.F오차(순자산_총액_억, 순자산_총액_억_계산값_1) < 2 ||
		공용.F오차율(순자산_총액_억, 순자산_총액_억_계산값_2) < 3 ||
		공용.F오차(순자산_총액_억, 순자산_총액_억_계산값_2) < 2 ||
		공용.F오차율(시가_총액_억, 시가_총액_억_계산값_1) < 3 ||
		공용.F오차(시가_총액_억, 시가_총액_억_계산값_1) < 2 ||
		공용.F오차율(시가_총액_억, 시가_총액_억_계산값_2) < 3 ||
		공용.F오차(시가_총액_억, 시가_총액_억_계산값_2) < 2,
		순자산_총액_억, 순자산_총액_억_계산값_1, 순자산_총액_억_계산값_2,
		시가_총액_억, 시가_총액_억_계산값_1, 시가_총액_억_계산값_2, s.M괴리율)

	// 추적 오차율 : 지수와 NAV의 수익률 차이.
	공용.F테스트_참임(테스트, math.Abs(float64(s.M추적_오차율)) < 6, s.M추적_오차율)

	//공용.F문자열_출력("ETF는 지정가 주문이라서 수량이 0이 될 수도 있다고 함. 수량이 0인 주문이 가능한 건가?")
	// 수량이 0인 주문은 없는 것이나 마찬가지이니 자체적으로 걸러내자.  
	for i, 매도_잔량 := range s.LP_매도_잔량_모음 {
		if i == 0 {
			continue
		}
		
		if 매도_잔량 > 0 {
			공용.F테스트_참임(테스트, s.LP_매도_잔량_모음[i-1] > 0, 
				i, s.LP_매도_잔량_모음[i-1], 매도_잔량)
		}
	}
	
	for i, 매수_잔량 := range s.LP_매수_잔량_모음 {
		if i == 0 {
			continue
		}
		
		if 매수_잔량 > 0 {
			공용.F테스트_참임(테스트, s.LP_매수_잔량_모음[i-1] > 0,
				i, s.LP_매수_잔량_모음[i-1], 매수_잔량)
		}
	}
	
	공용.F테스트_같음(테스트, s.ETF_복제_방법_구분_코드, P실물복제, P합성복제)
	공용.F테스트_같음(테스트, s.ETF_상품_유형_코드, P일반형, P파생형)
}

func f_ETF_현재가_조회_지수_자료_테스트(테스트 *testing.T,
	기본_자료 *S_ETF_현재가_조회_기본_자료,
	ETF_자료 *S_ETF_현재가_조회_ETF자료,
	s *S_ETF_현재가_조회_지수_자료) {
	// MUG 2101 화면 참조
	코스피_업종_맵 := make(map[string]string)
	코스피_업종_맵["00"] = "KRX 100"
	코스피_업종_맵["01"] = "코스피지수"
	코스피_업종_맵["02"] = "대형주"
	코스피_업종_맵["03"] = "중형주"
	코스피_업종_맵["04"] = "소형주"
	코스피_업종_맵["05"] = "음식료품"
	코스피_업종_맵["06"] = "섬유,의복"
	코스피_업종_맵["07"] = "종이,목재"
	코스피_업종_맵["08"] = "화학"
	코스피_업종_맵["09"] = "의약품"
	코스피_업종_맵["10"] = "비금속광물"
	코스피_업종_맵["11"] = "철광,금속"
	코스피_업종_맵["12"] = "기계"
	코스피_업종_맵["13"] = "전기,전자"
	코스피_업종_맵["14"] = "의료정밀"
	코스피_업종_맵["15"] = "운수장비"
	코스피_업종_맵["16"] = "유통업"
	코스피_업종_맵["17"] = "전기가스업"
	코스피_업종_맵["18"] = "건설업"
	코스피_업종_맵["19"] = "운수창고"
	코스피_업종_맵["20"] = "통신업"
	코스피_업종_맵["21"] = "금융업"
	코스피_업종_맵["22"] = "은행"
	코스피_업종_맵["24"] = "증권"
	코스피_업종_맵["25"] = "보험"
	코스피_업종_맵["26"] = "서비스업"
	코스피_업종_맵["27"] = "제조업"
	코스피_업종_맵["28"] = "코스피 200"
	코스피_업종_맵["29"] = "코스피 100"
	코스피_업종_맵["30"] = "코스피 50"
	코스피_업종_맵["32"] = "코스피 배당"
	코스피_업종_맵["37"] = "KP200 산업재"
	코스피_업종_맵["38"] = "KP200 건강관리"
	코스피_업종_맵["39"] = "KP200 건설기계"
	코스피_업종_맵["40"] = "KP200 조선운송"
	코스피_업종_맵["41"] = "KP200 철강소재"
	코스피_업종_맵["42"] = "KP200 에너지화학"
	코스피_업종_맵["43"] = "KP200 정보기술"
	코스피_업종_맵["44"] = "KP200 금융"
	코스피_업종_맵["45"] = "KP200 생활소비재"
	코스피_업종_맵["46"] = "KP200 경기소비재"
	코스피_업종_맵["47"] = "동일가중 KP200"
	코스피_업종_맵["48"] = "동일가중 KP100"
	코스피_업종_맵["49"] = "동일가중 KP50"
	
	코스닥_업종_맵 := make(map[string]string)
	코스닥_업종_맵["01"] = "코스닥지수"
	코스닥_업종_맵["03"] = "기타서비스"
	코스닥_업종_맵["04"] = "코스닥 IT"
	코스닥_업종_맵["06"] = "제조"
	코스닥_업종_맵["07"] = "건설"
	코스닥_업종_맵["08"] = "유통"
	코스닥_업종_맵["10"] = "운송"
	코스닥_업종_맵["11"] = "금융"
	코스닥_업종_맵["12"] = "통신방송서비스"
	코스닥_업종_맵["13"] = "IT S/W & SVC"
	코스닥_업종_맵["14"] = "IT H/W"
	코스닥_업종_맵["15"] = "음식료,담배"
	코스닥_업종_맵["16"] = "섬유,의류"
	코스닥_업종_맵["17"] = "종이,목재"
	코스닥_업종_맵["18"] = "출판,매체복제"
	코스닥_업종_맵["19"] = "화학"
	코스닥_업종_맵["20"] = "제약"
	코스닥_업종_맵["21"] = "비금속"
	코스닥_업종_맵["22"] = "금속"
	코스닥_업종_맵["23"] = "기계,장비"
	코스닥_업종_맵["24"] = "일반전기전자"
	코스닥_업종_맵["25"] = "의료,정밀기기"
	코스닥_업종_맵["26"] = "운송장비,부품"
	코스닥_업종_맵["27"] = "기타 제조"
	코스닥_업종_맵["28"] = "통신서비스"
	코스닥_업종_맵["29"] = "방송서비스"
	코스닥_업종_맵["30"] = "인터넷"
	코스닥_업종_맵["31"] = "디지털컨텐츠"
	코스닥_업종_맵["32"] = "소프트웨어"
	코스닥_업종_맵["33"] = "컴퓨터서비스"
	코스닥_업종_맵["34"] = "통신장비"
	코스닥_업종_맵["35"] = "정보기기"
	코스닥_업종_맵["36"] = "반도체"
	코스닥_업종_맵["37"] = "IT부품"
	코스닥_업종_맵["38"] = "KOSDAQ 100"
	코스닥_업종_맵["39"] = "KOSDAQ MID 300"
	코스닥_업종_맵["40"] = "KOSDAQ SMALL"
	코스닥_업종_맵["43"] = "코스닥 스타"
	코스닥_업종_맵["44"] = "오락,문화"
	코스닥_업종_맵["45"] = "프리미어"
	코스닥_업종_맵["46"] = "우량기업부"
	코스닥_업종_맵["47"] = "벤처기업부"
	코스닥_업종_맵["48"] = "중견기업부"
	코스닥_업종_맵["49"] = "기술성장기업부"
	
	// 게시판 답변에 따름.
	KRX지수_코드_맵 := make(map[string]string)
	KRX지수_코드_맵["0001"] = "KRX 100"
	KRX지수_코드_맵["0002"] = "동일가중 KRX"
	KRX지수_코드_맵["0101"] = "KRX Autos, KRX 자동차"
	KRX지수_코드_맵["0102"] = "KRX Semicon, KRX 반도체"
	KRX지수_코드_맵["0103"] = "KRX Health Care, KRX 건강"
	KRX지수_코드_맵["0104"] = "KRX Banks, KRX 은행"
	KRX지수_코드_맵["0105"] = "KRX IT"
	KRX지수_코드_맵["0106"] = "KRX Energy&Chem, KRX 에너지 화학"
	KRX지수_코드_맵["0107"] = "KRX Steels, KRX 철강"
	KRX지수_코드_맵["0108"] = "KRX Consumer, KRX 소비재"
	KRX지수_코드_맵["0109"] = "KRX Media&Tele, KRX 방송통신"
	KRX지수_코드_맵["0110"] = "KRX Construct, KRX 건설"
	KRX지수_코드_맵["0111"] = "KRX Financials, KRX 금융"
	KRX지수_코드_맵["0112"] = "KRX Securities"
	KRX지수_코드_맵["0113"] = "KRX Shipbuild, KRX 조선" 
	KRX지수_코드_맵["0114"] = "KRX Insurance, KRX 보험"
	KRX지수_코드_맵["0115"] = "KRX Transport, KRX 운송"
	KRX지수_코드_맵["0116"] = "KRX Retail, KRX 소매"
	KRX지수_코드_맵["0117"] = "KRX Leisure"
	KRX지수_코드_맵["0201"] = "KRX SRI"
	KRX지수_코드_맵["0202"] = "KRX SRI ECO"
	KRX지수_코드_맵["0203"] = "KRX Green"
	KRX지수_코드_맵["0204"] = "지배구조우수"
	
	// 게시판 답변 내용에 따름. 채권지수 세부코드는 뭐지?
	채권지수_코드_맵 := make(map[string]S_ETF_현재가_조회_지수_자료)
	채권지수_코드_맵["KISR01-1"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "KISR01",
		M채권_지수_세부_코드: "1",
		M지수_이름: "KTB index(총수익)"}
	채권지수_코드_맵["KISR01-2"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "KISR01",
		M채권_지수_세부_코드: "2",
		M지수_이름: "KTB 인덱스(순가격)"}
	채권지수_코드_맵["KISR01-3"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "KISR01",
		M채권_지수_세부_코드: "3",
		M지수_이름: "KTB 인덱스(시장가격)"}
	채권지수_코드_맵["MKFR01-1"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "MKFR01",
		M채권_지수_세부_코드: "1",
		M지수_이름: "MKF 국고채지수(총수익), MKF TB Index(총수익)"}
	채권지수_코드_맵["MKFR01-2"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "MKFR01",
		M채권_지수_세부_코드: "2",
		M지수_이름: "MKF 국고채지수(순가격)"}
	채권지수_코드_맵["MKFR01-3"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "MKFR01",
		M채권_지수_세부_코드: "3",
		M지수_이름: "MKF 국고채지수(시장가격)"}
	채권지수_코드_맵["MSBI01-1"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "MSBI01",
		M채권_지수_세부_코드: "1",
		M지수_이름: "MK 통안채지수(총수익)"}
	채권지수_코드_맵["MSBI01-2"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "MSBI01",
		M채권_지수_세부_코드: "2",
		M지수_이름: "MK 통안채지수(순가격)"}
	채권지수_코드_맵["MSBI01-3"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "MSBI01",
		M채권_지수_세부_코드: "3",
		M지수_이름: "MK 통안채지수(시장가격)"}
	채권지수_코드_맵["MSBI01-1"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "MSBI01",
		M채권_지수_세부_코드: "1",
		M지수_이름: "MK 머니마켓 지수(총수익)"}
	채권지수_코드_맵["MSBI01-1"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "MSBI01",
		M채권_지수_세부_코드: "2",
		M지수_이름: "MK 머니마켓 지수(순가격)"}
	채권지수_코드_맵["MSBI01-1"] = S_ETF_현재가_조회_지수_자료{
		M채권_지수_코드: "MSBI01",
		M채권_지수_세부_코드: "3",
		M지수_이름: "MK 머니마켓 지수(시장가격)"}
	
	// MUG 3900 화면 참조
	해외지수_맵 := make(map[string][2]string)
	해외지수_맵["000300"] = [2]string{"CSI 300", "CSI300 (China Securities Index 300)"}
	해외지수_맵["AEXX"] = [2]string{"네덜란드 지수", "AEX (Amsterdam Exchange Index)"}
	해외지수_맵["AOI"] = [2]string{"호주 지수", "AOI (Australian All Ordinaries Index)"}
	해외지수_맵["ATX"] = [2]string{"오스트리아 지수", "ATX (Austrian Traded Index)"}
	해외지수_맵["BFX"] = [2]string{"벨기에 지수", "BEL-20"}
	해외지수_맵["BSESN"] = [2]string{"인도 지수", "BSE 30, SENSEX (Bombay Stock Exchange Sensitive Index)"}
	해외지수_맵["BVSP"] = [2]string{"브라질 지수", "Bovespa Index"}
	해외지수_맵["CASE30"] = [2]string{"이집트 지수", "Cairo & Alexandria Stock Exchange Index"}
	해외지수_맵["DAX"] = [2]string{"독일 지수", "Frankfurt DAX (Deutscher Aktienindex : German stock index)"}
	해외지수_맵["ESFG"] = [2]string{"E-mini S&P 지수선물", "E-mini S&P 500 Future Globex Index"}
	해외지수_맵["GSPTSE"] = [2]string{"캐나다 지수", "TSX Composite Index, Toronto Stock Exchange, CAD"}
	해외지수_맵["HSCE"] = [2]string{"홍콩H 지수", "HangSeng China Enterprises Index"}
	해외지수_맵["HSI"] = [2]string{"항셍 지수", "HangSeng Index"}
	해외지수_맵["IPSA"] = [2]string{"칠레 지수", "IPSA (Índice de Precio Selectivo de Acciones)"}
	해외지수_맵["JALSH"] = [2]string{"남아프리카공화국 지수", "JALSH(JSE Africa All Share Index)"}
	해외지수_맵["JCI"] = [2]string{"인도네시아 지수", "Jakarta Composite Index"}
	해외지수_맵["KFX"] = [2]string{"덴마크 지수", "KFX"}
	해외지수_맵["KLSE"] = [2]string{"말레이시아 지수", "Bursa Malaysia KLCI(Kuala Lumpur Composite Index)"}
	해외지수_맵["KOSPI"] = [2]string{"한국 코스피 지수", "KOSPI(Korea Composite Stock Price Index)"}
	해외지수_맵["MERV"] = [2]string{"아르헨티나 지수", "MERVAL(MERcado de VALores : Stock Market) Index"}
	해외지수_맵["MTMS"] = [2]string{"러시아 지수", "Moscow Times (Russia)"}
	해외지수_맵["MXX"] = [2]string{"멕시코 지수", "Mexico IPC(Indice de Precios y Cotizaciones) Index"}
	해외지수_맵["N225"] = [2]string{"일본 니케이225 지수", "Nikkei 225 Index"}
	해외지수_맵["NQIG"] = [2]string{"E-mini NASDAQ 100 선물지수", "E-mini NASDAQ-100 Futures"}
	해외지수_맵["NZ50"] = [2]string{"뉴질랜드 지수", "NZX 50 Index"}
	해외지수_맵["PARI"] = [2]string{"프랑스 지수", "Paris CAC 40"}
	해외지수_맵["PSI"] = [2]string{"필리핀 지수", "PSE(Phillipine Stock Exchange) Composite Index"}
	해외지수_맵["RDXUSD"] = [2]string{"러시아 블루칩 지수", "RDX(Russian Depositary Index) in USD"}
	해외지수_맵["SET"] = [2]string{"태국 지수", "Thailand SET(Stock Exchang of Thailand) Index"}
	해외지수_맵["SHANG"] = [2]string{"중국상해종합지수", "Shanghai Composite Index"}
	해외지수_맵["SPFG"] = [2]string{"S&P 500 지수선물", "S&P 500 Index Futures"}
	해외지수_맵["SPFR"] = [2]string{"S&P 500 지수선물", "S&P 500 Index Futures"}
	해외지수_맵["SSEA"] = [2]string{"상해A 지수", "Shanghai A Share"}
	해외지수_맵["SSEB"] = [2]string{"상해B 지수", "Shanghai B Share"}
	해외지수_맵["SSMI"] = [2]string{"스위스 지수", "Swiss Market Index"}
	해외지수_맵["STI"] = [2]string{"싱가포르 지수", "Straits Times Index"}
	해외지수_맵["SX5E"] = [2]string{"유로 STOXX50 지수", "Euro Stoxx 50"}
	해외지수_맵["SXAXP"] = [2]string{"스웨덴 지수", "Sweden Stockholm General Index"}
	해외지수_맵["SZSA"] = [2]string{"심천A 지수", "Shenzhen A Share"}
	해외지수_맵["SZSB"] = [2]string{"심천B 지수", "Shenzhen B Share"}
	해외지수_맵["TWI"] = [2]string{"대만 지수", "TSE(Taiwan Stock Exchange) Weighted Index"}
	해외지수_맵["VEB"] = [2]string{"베네주엘라 지수", "Venezuelan Bolivar VE"}
	해외지수_맵["VNI"] = [2]string{"베트남 지수", "Vietnam Ho Chi Minh Stock Index"}
	
	// Mug 2108 화면. 게시판 답변 내용에 따름.
	기타_업종_코드_맵 := make(map[string]string)
	기타_업종_코드_맵["001"] = "코스피200 선물지수"
	기타_업종_코드_맵["002"] = "코스피200 선물인버스지수"
	기타_업종_코드_맵["003"] = "미국달러 선물지수"
	기타_업종_코드_맵["004"] = "미국달러 선물인버스지수"
	기타_업종_코드_맵["005"] = "코스피200 레버리지지수"
	기타_업종_코드_맵["006"] = "코스피200 커버드콜지수"
	기타_업종_코드_맵["007"] = "코스피200 프로텍티브풋지수"
	기타_업종_코드_맵["008"] = "국채 선물지수(3년)"
	기타_업종_코드_맵["009"] = "국채 선물인버스지수(3년)"
	기타_업종_코드_맵["010"] = "국채 선물지수(10년)"
	기타_업종_코드_맵["011"] = "국채 선물인버스지수(10년)"
	기타_업종_코드_맵["012"] = "MSCI Korea Index"
	기타_업종_코드_맵["013"] = "주식골드지수"
	기타_업종_코드_맵["014"] = "코스피200 리스크컨트롤 6%지수"
	기타_업종_코드_맵["015"] = "코스피200 리스크컨트롤 8%지수"
	기타_업종_코드_맵["016"] = "코스피200 리스크컨트롤 10%지수"
	기타_업종_코드_맵["017"] = "코스피200 리스크컨트롤 12%지수"
	기타_업종_코드_맵["018"] = "주식미국채DAE지수"
	기타_업종_코드_맵["019"] = "V-KOSPI200지수 (코스피200 변동성 지수)"
	기타_업종_코드_맵["020"] = "주식국채혼합형(주식형)지수"
	기타_업종_코드_맵["021"] = "주식국채혼합형(채권형)지수"
	기타_업종_코드_맵["022"] = "코스피200 DAE지수"
	기타_업종_코드_맵["023"] = "코스피200 고배당지수" 
	기타_업종_코드_맵["024"] = "코스피200 저변동성지수"
	기타_업종_코드_맵["025"] = "미국달러 선물레버리지지수"
	기타_업종_코드_맵["026"] = "코스피 고배당 50지수"
	기타_업종_코드_맵["027"] = "코스피 배당성장 50지수"
	기타_업종_코드_맵["028"] = "코스피 우선주 지수"
	기타_업종_코드_맵["029"] = "KRX 고배당 50"
	기타_업종_코드_맵["030"] = "코스피 200 선물 플러스지수"
	기타_업종_코드_맵["031"] = "K200 USD 선물 바이셀지수"
	기타_업종_코드_맵["032"] = "USD K200 선물 바이셀지수"
	기타_업종_코드_맵["033"] = "코스피 선물매수 콜매도지수"
	기타_업종_코드_맵["034"] = "코스피 선물매도 풋매도지수"
	기타_업종_코드_맵["035"] = "WISE 삼성그룹 인덱스"
	기타_업종_코드_맵["036"] = "WISE 로우볼 지수"
	기타_업종_코드_맵["037"] = "WISE 셀렉트 배당 지수"
	기타_업종_코드_맵["038"] = "WISE K150 Quant 인덱스"
	기타_업종_코드_맵["039"] = "Big Vol 지수"
	기타_업종_코드_맵["040"] = "BNP High Dividend Yield Europe Equity Long TR EUR"
	기타_업종_코드_맵["041"] = "코스피 200 내재가치 지수"
	기타_업종_코드_맵["042"] = "스마트 리밸런싱 250/3 A 지수"
	기타_업종_코드_맵["043"] = "WISE 롱숏 K150 로우볼지수"
	기타_업종_코드_맵["044"] = "WISE BIG5 동일가중 TR 지수"
	기타_업종_코드_맵["045"] = "WISE 스마트베타 Quality 지수"
	기타_업종_코드_맵["046"] = "WISE 스마트베타 Momentum 지수"
	기타_업종_코드_맵["047"] = "WISE 스마트베타 Value 지수"
	기타_업종_코드_맵["048"] = "WISE Monthly Best 11 지수"
	기타_업종_코드_맵["049"] = "코스피 200 선물 인버스-2X지수"
	기타_업종_코드_맵["050"] = "코스피 200 선물 인버스-3X지수"
	기타_업종_코드_맵["051"] = "미국달러선물 인버스-2X지수"
	기타_업종_코드_맵["052"] = "미국달러선물 인버스-3X지수"
	기타_업종_코드_맵["053"] = "KTOP30"
	기타_업종_코드_맵["054"] = "코스닥150"
	기타_업종_코드_맵["055"] = "코스닥200 중소형주 지수"
	기타_업종_코드_맵["056"] = "코스닥200 필수소비재 지수"
	기타_업종_코드_맵["057"] = "FnGuide 에너지 TOP5 지수"
	기타_업종_코드_맵["058"] = "FnGuide 필수소비재 TOP5 지수"
	기타_업종_코드_맵["059"] = "FnGuide 조선 TOP5 지수" 
	기타_업종_코드_맵["060"] = "FnGuide 소프트웨어 TOP5 IT 지수"
	기타_업종_코드_맵["061"] = "FnGuide IT 하드웨어 TOP5 지수"
	기타_업종_코드_맵["062"] = "FnGuide 운송 TOP5 지수"
	기타_업종_코드_맵["063"] = "FnGuide 자동차 TOP5 지수"
	기타_업종_코드_맵["064"] = "FnGuide 의료 TOP5 지수"
	기타_업종_코드_맵["065"] = "FnGuide 화학 TOP5 지수"
	기타_업종_코드_맵["066"] = "FnGuide 바이오 TOP5 지수"
	기타_업종_코드_맵["067"] = "FnGuide 제약 TOP5 지수"
	기타_업종_코드_맵["068"] = "FnGuide 건설 TOP5 지수"
	기타_업종_코드_맵["069"] = "코스닥150 동일가중지수"
	기타_업종_코드_맵["070"] = "코스닥150 레버리지지수"
	기타_업종_코드_맵["071"] = "엔선물 지수"
	기타_업종_코드_맵["072"] = "엔선물 레버리지지수"
	기타_업종_코드_맵["073"] = "엔선물 인버스지수"
	기타_업종_코드_맵["074"] = "엔선물 인버스-2X지수"
	기타_업종_코드_맵["075"] = "엔선물 인버스-3X지수"
	기타_업종_코드_맵["076"] = "유로선물지수"
	기타_업종_코드_맵["077"] = "유로선물지수 레버리지지수"
	기타_업종_코드_맵["078"] = "유로선물지수 인버스지수"
	기타_업종_코드_맵["079"] = "유로선물지수 인버스-2X지수"
	기타_업종_코드_맵["080"] = "유로선물지수 인버스-3X지수"
	
	공용.F문자열_출력("\n" +
		"업종 코드 : '%v'\n" +
		"KRX지수 코드 : '%v'\n" +
		"지수 이름 : '%v'\n" +
		"해외 지수 코드 : '%v'\n" +
		"기타 업종 코드 : '%v'\n" +
		"채권 지수 코드 : '%v'\n" +
		"채권 지수 세부 코드 : '%v'\n" +
		"지수 : '%v', 부호 : '%v', 등락폭 : '%v'\n" +
	 	"채권 지수 : '%v', 부호 : '%v', 등락폭 : '%v'\n",
		s.M업종_코드, 
		s.KRX지수_코드, 
		s.M지수_이름, 
		s.M해외_지수_코드, 
		s.M기타_업종_코드, 
		s.M채권_지수_코드, 
		s.M채권_지수_세부_코드,
		s.M지수, s.M지수_등락부호, s.M지수_등락폭,
		s.M채권_지수, s.M채권_지수_등락부호, s.M채권_지수_등락폭)
	
	이름_비교값 := ""
	존재함 := false
	
	검사_제외_종목코드_모음 := []string{
		"101280"}
	
	for _, 종목_코드 := range 검사_제외_종목코드_모음 {
		if 종목_코드 == 기본_자료.M종목_코드 {
			return
		}
	} 
	
	switch {
	case s.M업종_코드 == "" && s.KRX지수_코드 == "" &&
		s.M해외_지수_코드 == "" && s.M기타_업종_코드 == "" &&
		s.M채권_지수_코드 == "" && s.M채권_지수_세부_코드 == "" &&
		s.M지수 == 0 && s.M채권_지수 == 0:
		공용.F테스트_참임(테스트, utf8.ValidString(s.M지수_이름), s.M지수_이름)
		공용.F문자열_출력("** 종목 코드 : '%v', 지수 이름 : '%v' **", 
			기본_자료.M종목_코드, s.M지수_이름)
		return
	case s.M업종_코드 != "" && s.M업종_코드 != "00":
		switch ETF_자료.ETF구분 {
		case P코스피:
			이름_비교값, 존재함 = 코스피_업종_맵[s.M업종_코드]
		case P코스닥:
			이름_비교값, 존재함 = 코스닥_업종_맵[s.M업종_코드]
		default:
			공용.F에러("예상치 못한 ETF구분값. '%v'", )
			테스트.FailNow()
		}
		
		공용.F테스트_참임(테스트, 존재함, s.M업종_코드, ETF_자료.ETF구분)
	case s.KRX지수_코드 != "":
		이름_비교값, 존재함 = KRX지수_코드_맵[s.KRX지수_코드]
		공용.F테스트_참임(테스트, 존재함, s.KRX지수_코드)
	case s.M채권_지수_코드 != "":
		채권_지수_자료, 존재함 := 채권지수_코드_맵[s.M채권_지수_코드 + "-" + s.M채권_지수_세부_코드]
		
		공용.F테스트_참임(테스트, 존재함, s.M채권_지수_코드)
		공용.F테스트_같음(테스트, s.M채권_지수_코드, 채권_지수_자료.M채권_지수_코드)
		공용.F테스트_같음(테스트, s.M채권_지수_세부_코드, 채권_지수_자료.M채권_지수_세부_코드)
		
		이름_비교값 = 채권_지수_자료.M지수_이름
	case s.M해외_지수_코드 != "":
		해외_지수_자료, 존재함 := 해외지수_맵[s.M해외_지수_코드]
		공용.F테스트_참임(테스트, 존재함, s.M해외_지수_코드)
		
		이름_비교값 = 해외_지수_자료[1]
	case s.M기타_업종_코드 != "":
		이름_비교값, 존재함 = 기타_업종_코드_맵[s.M기타_업종_코드]
		공용.F테스트_참임(테스트, 존재함, s.M기타_업종_코드)
	}
	
	이름_비교값 = strings.Replace(이름_비교값, " ", "", -1)
	이름_수신값 := strings.Replace(s.M지수_이름, " ", "", -1)
	
	공용.F테스트_참임(테스트, utf8.ValidString(s.M지수_이름)) 
	공용.F테스트_참임(테스트, 
			strings.Contains(이름_수신값, 이름_비교값) ||
			strings.Contains(이름_비교값, 이름_수신값), 
			이름_수신값, 이름_비교값)
	
	if s.M채권_지수_코드 == "" {
		공용.F테스트_참임(테스트, s.M지수 > 0)
		공용.F테스트_참임(테스트, f올바른_등락부호(s.M지수_등락부호), s.M지수_등락부호)
		공용.F테스트_참임(테스트, s.M지수_등락폭 >= 0) // 절대값?
	} else {
		공용.F테스트_참임(테스트, s.M채권_지수 > 0)
		공용.F테스트_참임(테스트, f올바른_등락부호(s.M채권_지수_등락부호), s.M채권_지수_등락부호)
		공용.F테스트_참임(테스트, s.M채권_지수_등락폭 >= 0) // 절대값?
	}
}