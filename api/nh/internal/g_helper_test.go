package internal

import (
	공용 "github.com/ghts/ghts/common"

	"testing"
	"time"
)

func TestP등락부호_상수(테스트 *testing.T) {

	등락부호_상수_모음 := make([]interface{}, 0)
	등락부호_상수_모음 = append(등락부호_상수_모음, P상한)
	등락부호_상수_모음 = append(등락부호_상수_모음, P상승)
	등락부호_상수_모음 = append(등락부호_상수_모음, P보합)
	등락부호_상수_모음 = append(등락부호_상수_모음, P하한)
	등락부호_상수_모음 = append(등락부호_상수_모음, P하락)

	for _, 등락부호_상수 := range 등락부호_상수_모음 {
		_, ok := 등락부호_상수.(byte)

		공용.F테스트_참임(테스트, ok)
	}
}

func TestDLL존재함(테스트 *testing.T) {
	공용.F테스트_참임(테스트, fDLL존재함())
}

func TestF접속됨(테스트 *testing.T) {
	if f접속됨() {
		f접속_해제()
	}

	공용.F테스트_거짓임(테스트, f접속됨())
}

func TestS콜백_대기(테스트 *testing.T) {
	일초전 := time.Now().Add(-1 * time.Second)
	일분후 := time.Now().Add(time.Minute)
	s1 := New콜백_대기(P질의_접속, "TR코드1", 공용.New질의_가변형(P30초, 공용.P메시지_GET, "인수1"))
	s2 := New콜백_대기(P질의_접속_해제, "TR코드2", 공용.New질의_가변형(P30초, 공용.P메시지_SET, "인수2", "인수3"))

	공용.F테스트_참임(테스트, s1.G식별번호() < s2.G식별번호())

	공용.F테스트_참임(테스트, s1.G유효기간().After(일초전))
	공용.F테스트_참임(테스트, s1.G유효기간().Before(일분후))
	공용.F테스트_같음(테스트, s1.G질의_종류(), P질의_접속)
	공용.F테스트_같음(테스트, s1.G질의_코드(), "TR코드1")
	공용.F테스트_에러없음(테스트, s1.G질의().G검사(공용.P메시지_GET, 1))

	공용.F테스트_참임(테스트, s2.G유효기간().After(일초전))
	공용.F테스트_참임(테스트, s2.G유효기간().Before(일분후))
	공용.F테스트_같음(테스트, s2.G질의_종류(), P질의_접속_해제)
	공용.F테스트_같음(테스트, s2.G질의_코드(), "TR코드2")
	공용.F테스트_에러없음(테스트, s2.G질의().G검사(공용.P메시지_SET, 2))
}

func TestF바이트2참거짓(테스트 *testing.T) {
	공용.F테스트_참임(테스트, f바이트2참거짓([]byte("1"), "1", true))
	공용.F테스트_거짓임(테스트, f바이트2참거짓([]byte("2"), "1", true))
}

func TestF접속_안_되어_있으면_에러(테스트 *testing.T) {
	공용.F문자열_출력_일시정지_시작()
	defer 공용.F문자열_출력_일시정지_해제()

	질의 := 공용.New질의_가변형(P30초, 공용.P메시지_GET)

	if f접속됨() {
		공용.F테스트_에러없음(테스트, f접속_안_되어_있으면_에러(질의))
		f접속_해제()
	}

	공용.F테스트_에러발생(테스트, f접속_안_되어_있으면_에러(질의))
}
