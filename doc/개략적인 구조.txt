개략적인 구조.

다음에 나열된 모듈 간에 서로 메시지를 주고 받으면서 전체적인 매매 시스템을 구성한다.

1. 공용 기능 모듈
	- 테스트 편의 함수 (OK)
	- zmq소켓 편의 함수 (OK)
	- 외부 프로세스 관리 편의 함수 (OK)
	- 공용 데이터 형식 (OK)
	- 테스트용 샘플 데이터 (OK)	
2. 공용 데이터 모듈
	- zmq소켓 주소 (OK)
	- 종목정보 (OK)
	- 종목별 보유수량 (롱 포지션, 숏 포지션 구분할 것) (TODO)  
	- 로깅 (별도 모듈로 분리?)
3. 가격정보 모듈
	- 가격배포 (OK)
	- 가격정보 (OK)
	- 가격입수 (TODO)
	- 가격정보 질의 응답 (NEED MORE WORK)
4. 주문전송 모듈
	- 우선순위, 전송보류 시한, 주문전송 시점.
	- 같은 종목에 대한 매입 및 매도 주문은 서로 체결된 것으로 상정하고 상쇄 시킴. (거래 수수료 절감.) 
	- 거래 체결내역 로깅
5. 매매전략 모듈
6. 위험관리 모듈

멀티스레드 모델의 경우 컴퓨팅 자원의 소모가 적은 장점이 있긴 하지만,
메모리 공유로 인한 문제를 해결하는 것은 기술적 난이도가 높다.

참조 : Concurrency Hazards : 11 Likely Problems In Your Multithreaded Code
(https://msdn.microsoft.com/en-us/magazine/cc817398.aspx)

그래서, 각 모듈은 가능한한 메모리 공유를 피하고,  
Go언어의 채널을 통한 메시지 전달 혹은 ZeroMQ를 통한 메시지 전달등을 통해서
정보를 주고 받으면서 작동하도록 한다.

특히, ZeroMQ를 사용하여 독립된 프로세스 간에 메시지를 주고 받는 경우에는 
서로 다른 프로그래밍 언어 간에 메시지를 주고 받을 수 있으며,
서로 다른 저작권을 따르는 소스 코드를 함께 사용할 수 있다는 장점도 있다.


예제코드를 제외한 GHTS에서 강제적 소스코드 공개의무가 일부 포함된 
LGPL 라이센스를 채택한 이유는,
자기가 수정한 부분을 남에게 공개해야 하는 동시에,
타인이 수정한 부분도 자기에게 똑같이 공유되므로,
어느 한 쪽은 일방적으로 기여만 하고, 
다른 한 쪽은 일방적으로 이용하기만 하는 착취의 상황이 지속되는 것을 방지하고,
자기가 기여한 대신 타인이 기여한 부분의 혜택도 받을 수 있도록 하여서, 
상호 간의 협력을 촉진하기 위해서 이다.

매매전략 및 위험관리 전략의 예제 코드를 MIT라이센스를 채택한 이유는
매매전략은 각자의 경쟁우위 요소이며,
협력을 위해서 공개하는 순간에 해당 전략의 캐파(capacity)가 꽉 차서,
수익률이 사라지고 해당 전략 자체가 무의미해지므로,
서로가 협력할 수 없는, 즉, 시장 경쟁에 적합한 분야이므로,
자유롭게 수정하고 이용할 수 있되, 소스코드 공개 의무가 없는 MIT라이센스로
상호 간의 시장 경쟁을 촉진하기 위해서 이다.

즉, 인간은 협력과 경쟁을 모두 할 수 있으며,
협력할 수록 모두의 이익이 커지는 부분에 대해서는 LGPL라이센스를 채택하고,
협력할 수록 모두의 이익이 사라지며, 서로 경쟁할 수 밖에 없는 부분에 대해서는 
MIT라이센스를 채택하였다.