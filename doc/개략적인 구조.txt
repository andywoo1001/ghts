개략적인 구조.

다음에 나열된 모듈 간에 서로 메세지를 주고 받으면서 전체적인 매매 시스템을 구성한다.

1. 가격정보 모듈
   a. 가격입수
   b. 가격배포 (Done.)
   c. 가격정보 캐시
2. 매매전략 모듈
3. 위험관리 모듈
4. 주문전송 모듈

5. 공유 자료 모듈
   a. 주소정보
   b. 종목정보
   c. 자산내역 (일단 좀 더 생각해 보자.)
 

각 모듈은 고정된 bind endpoint를 가진 ROUTER서버와 임의의 connect endpoint를 가진 DEALER(or ROUTER) 클라이언트를 가진다.
	

Pub-Sub 패턴은 기술적으로 어려운 면이 있으므로,
대규모가 아닐 경우 ROUTER-DEALER패턴 (비동기화 된 Req-Res 패턴)을 반복하여 비슷한 효과를 꾀하자.


멀티스레드 모델의 경우 컴퓨팅 자원의 소모가 적은 장점이 있긴 하지만,
메모리 공유로 인해서 프로그래밍 상의 어려움이 너무 크므로,
최근의 풍부한 컴퓨팅 자원을 저렴하게 구입할 수 있는 상황을 고려하여,
컴퓨팅 자원의 소모가 약간 더 많기는 하지만,
메모리 공유가 원천적으로 차단되어서 프로그램의 안정성을 높이고,
프로그래밍의 단순함을 얻을 수 있는 '멀티 프로세스' 모델을 채택하기로 한다.

멀티스레드 모델에서 프로그래밍의 어려움에 대한 글은 다음을 참조한다.
Concurrency Hazards : 11 Likely Problems In Your Multithreaded Code
(동시처리의 위험성 : 멀티스레드 코드에서 발생하기 쉬운 11가지 문제점)
By Microsoft (마이크로소프트. MS 윈도우를 만든 소프트웨어 회사.)
링크 : https://msdn.microsoft.com/en-us/magazine/cc817398.aspx 

서로 간에 메모리가 독립된 프로세스 간에는 메세지 전달을 통해서 정보를 주고 받는다.
AMQP의 경우 세계 표준이고, 중앙집중식이라서 프로그래밍이 간편하지만,
고빈도 매매를 수행하기에는 성능이 떨어진다고 한다.
그리하여, ZeroMQ 혹은 그 후속작인 nanomsg를 기반으로 메세지를 서로 주고 받는다.
ZeroMQ와 nanomsg를 사용하면 독립된 프로세스 간에 메세지를 주고 받는 것 이외에도
서로 다른 프로그래밍 언어 간에 메세지를 주고 받을 수 있으며,
서로 다른 저작권을 따르는 소스 코드를 함께 사용할 수 있다는 장점도 있다.

서로 다른 프로그래밍 언어를 함께 사용하는 경우를 예를 들면, 
증권사의 API 사용법 예제가 C++로 되어 있는 반면에, 
매매전략 수립을 위한 통계계산 예제는 Python등으로 되어 있으며,
예제 소스코드를 최대한 재활용해서 매매 시스템을 구성하고 싶을 경우에,
C++로 되어 있는 예제와 Python으로 된 예제를 독립된 모듈로 만든 후
ZeroMQ나 nanomsg로 메세지를 주고 받으면서 매매 시스템을 구성하도록 하면 된다.

GHTS는 GNU LGPL 라이센스를 채택하고 있다.
이것은 자유롭게 사용, 수정, 배포할 수 있으며,
GHTS 자체를 수정한 경우에는 해당 부분의 소스코드도 함께 배포해야 하는 의무가 있다.

GHTS를 사용했지만 GHTS 자체를 수정하지 않고 불러다 쓰기만 한 경우에는
자기만의 소스코드를 강제로 배포해야 할 의무는 없다.

매매전략 및 위험관리 예제 코드는 MIT라이센스로 배포할 계획이며,
MIT라이센스의 경우에는 그 자체를 수정하더라도 배포할 때 
소스코드를 공개할 의무가 없으므로,
MIT라이센스로 된 예제코드를 수정 후 사용 및 배포할 때 아무런 제약이 없다.

예제코드를 제외한 GHTS를 약간의 제약이 있는 LGPL 라이센스를 채택한 이유는
자기가 수정한 부분을 남에게 공개해야 하는 대신에,
타인이 수정한 부분에 대해서도 똑같은 권한을 가지므로,
타인에게 일방적으로 이용당하기만 하는 사태를 방지하고,
따라서 GHTS 발전에 있어서 협력을 촉진하기 위해서 이다.

매매전략 및 위험관리 코드는 각자의 경쟁우위 요소이며,
협력을 위해서 공개하는 순간에 해당 전략은 무효해지므로,
(capacity가 꽉 차면 수익률이 사라짐.)
협력에 적절하지 않고, 서로 공개하고 경쟁하는 것이 적절하므로,
관련 예제코드를 MIT라이센스로 작성할 계획이다.

인간은 협력과 경쟁을 모두 할 수 있으며,
GHTS이 각 요소마다 협력과 경쟁에 적절한 라이센스를 채택한 것이다.  
 
상호협조를 

  