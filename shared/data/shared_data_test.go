/* This file is part of GHTS.

GHTS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

GHTS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with GHTS.  If not, see <http://www.gnu.org/licenses/>.

@author: UnHa Kim <unha.kim.ghts@gmail.com> */

package data

import (
	공용 "github.com/ghts/ghts/shared/minimal"
	
	"strconv"
	"strings"
	"testing"
)

func TestF공용정보_Go루틴_주소정보(테스트 *testing.T) {
	// 준비
	F공용정보_모듈_실행()
	공용.F테스트_참임(테스트, 공용정보_Go루틴_실행_중.G값())

	회신 := 공용.New질의(공용.P메시지_초기화).G회신(ch제어_공용정보_Go루틴)
	공용.F테스트_에러없음(테스트, 회신.G에러())

	// 주소 정보 테스트
	질의값_모음 := []string{공용.P주소명_주소정보, 공용.P주소명_테스트_결과,
		공용.P주소명_가격정보, 공용.P주소명_종목정보}

	for _, 질의값 := range 질의값_모음 {
		회신 := 공용.New질의(공용.P메시지_GET, 질의값).G회신(Ch주소)

		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G구분(), 공용.P메시지_OK)
		공용.F테스트_같음(테스트, 회신.G길이(), 1)

		switch 질의값 {
		case 공용.P주소명_주소정보:
			공용.F테스트_같음(테스트, 회신.G내용(0), 공용.P주소_주소정보)
		case 공용.P주소명_테스트_결과:
			공용.F테스트_같음(테스트, 회신.G내용(0), 공용.P주소_테스트_결과)
		default:
			공용.F테스트_참임(테스트, strings.HasPrefix(회신.G내용(0), "tcp://127.0.0.1:"))
			포트번호_문자열 := strings.TrimLeft(회신.G내용(0), "tcp://127.0.0.1:")
			_, 에러 := strconv.Atoi(포트번호_문자열)
			공용.F테스트_에러없음(테스트, 에러)
		}
	}

	회신 = 공용.New질의(공용.P메시지_GET, "존재하지 않는 주소 이름").G회신(Ch주소)

	공용.F테스트_에러발생(테스트, 회신.G에러())
	공용.F테스트_같음(테스트, 회신.G구분(), 공용.P메시지_에러)
	공용.F테스트_같음(테스트, 회신.G길이(), 0)
}

func TestF공용정보_Go루틴_종목정보(테스트 *testing.T) {
	// Go루틴 준비
	F공용정보_모듈_실행()
	공용.New질의(공용.P메시지_초기화).G회신(ch제어_공용정보_Go루틴)

	// 종목 정보 테스트
	종목_모음 := 공용.F샘플_종목_모음()

	for _, 종목 := range 종목_모음 {
		회신 := 공용.New질의(공용.P메시지_GET, 종목.G코드()).G회신(Ch종목)

		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G구분(), 공용.P메시지_OK)
		공용.F테스트_같음(테스트, 회신.G길이(), 2)
		공용.F테스트_같음(테스트, 회신.G내용(0), 종목.G코드())
		공용.F테스트_같음(테스트, 회신.G내용(1), 종목.G이름())
	}

	공용.F문자열_출력_일시정지_시작()
	회신 := 공용.New질의(공용.P메시지_GET, "존재하지 않는 종목코드").G회신(Ch종목)
	공용.F문자열_출력_일시정지_해제()

	공용.F테스트_에러발생(테스트, 회신.G에러())
	공용.F테스트_같음(테스트, 회신.G구분(), 공용.P메시지_에러)
	공용.F테스트_같음(테스트, 회신.G길이(), 0)
}

func TestF공용정보_Go루틴_종목별_보유량(테스트 *testing.T) {
	// Go루틴 준비
	F공용정보_모듈_실행()
	공용.New질의(공용.P메시지_초기화).G회신(ch제어_공용정보_Go루틴)

	// 종목 정보 테스트
	종목별_보유량_맵 := make(map[string]공용.I종목별_보유량)
	종목_모음 := 공용.F샘플_종목_모음()
	r := 공용.F임의값_생성기()
	회신 := 공용.New회신(nil) // 재활용 위해서 선언.

	// 쓰기
	for _, 종목 := range 종목_모음 {
		롱포지션 := int(r.Int31())
		숏포지션 := int(r.Int31())
		종목별_보유량 := 공용.New종목별_보유량(종목.G코드(), 롱포지션, 숏포지션)

		종목별_보유량_맵[종목.G코드()] = 종목별_보유량

		회신 = 공용.New질의(공용.P메시지_SET, 종목.G코드(), 공용.P포지션_롱, 롱포지션).G회신(Ch종목별_보유량)
		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G길이(), 0)

		회신 = 공용.New질의(공용.P메시지_SET, 종목.G코드(), 공용.P포지션_숏, 숏포지션).G회신(Ch종목별_보유량)
		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G길이(), 0)
	}

	// 읽기
	for _, 종목 := range 종목_모음 {
		종목별_보유량 := 종목별_보유량_맵[종목.G코드()]

		회신 = 공용.New질의(공용.P메시지_GET, 종목.G코드(), 공용.P포지션_롱).G회신(Ch종목별_보유량)
		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G길이(), 1)
		공용.F테스트_같음(테스트, 회신.G내용(0), 공용.F2문자열(종목별_보유량.G롱포지션()))

		회신 = 공용.New질의(공용.P메시지_GET, 종목.G코드(), 공용.P포지션_숏).G회신(Ch종목별_보유량)
		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G길이(), 1)
		공용.F테스트_같음(테스트, 회신.G내용(0), 공용.F2문자열(종목별_보유량.G숏포지션()))
	}

	// 수정하기
	for _, 종목 := range 종목_모음 {
		롱포지션_추가 := int(r.Int31())
		숏포지션_추가 := int(r.Int31())
		종목별_보유량 := 종목별_보유량_맵[종목.G코드()]

		종목별_보유량.S더하기_롱포지션(롱포지션_추가)
		종목별_보유량.S더하기_숏포지션(숏포지션_추가)

		회신 := 공용.New질의(공용.P메시지_SET, 종목.G코드(), 공용.P포지션_롱, 롱포지션_추가).G회신(Ch종목별_보유량)
		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G길이(), 0)

		회신 = 공용.New질의(공용.P메시지_SET, 종목.G코드(), 공용.P포지션_숏, 숏포지션_추가).G회신(Ch종목별_보유량)
		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G길이(), 0)
	}

	// 수정된 값 확인
	for _, 종목 := range 종목_모음 {

		종목별_보유량 := 종목별_보유량_맵[종목.G코드()]

		회신 = 공용.New질의(공용.P메시지_GET, 종목.G코드(), 공용.P포지션_롱).G회신(Ch종목별_보유량)
		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G길이(), 1)
		공용.F테스트_같음(테스트, 회신.G내용(0), 공용.F2문자열(종목별_보유량.G롱포지션()))

		회신 = 공용.New질의(공용.P메시지_GET, 종목.G코드(), 공용.P포지션_숏).G회신(Ch종목별_보유량)
		공용.F테스트_에러없음(테스트, 회신.G에러())
		공용.F테스트_같음(테스트, 회신.G길이(), 1)
		공용.F테스트_같음(테스트, 회신.G내용(0), 공용.F2문자열(종목별_보유량.G숏포지션()))
	}

	//공용.F문자열_출력_일시정지_시작()
	회신 = 공용.New질의(공용.P메시지_GET, "존재하지 않는 종목코드", 공용.P포지션_롱).G회신(Ch종목별_보유량)
	공용.F테스트_에러발생(테스트, 회신.G에러())
	공용.F테스트_같음(테스트, 회신.G구분(), 공용.P메시지_에러)
	공용.F테스트_같음(테스트, 회신.G길이(), 0)
	//공용.F문자열_출력_일시정지_해제()

	회신 = 공용.New질의(공용.P메시지_GET, "존재하지 않는 종목코드", 공용.P포지션_숏).G회신(Ch종목별_보유량)
	공용.F테스트_에러발생(테스트, 회신.G에러())
	공용.F테스트_같음(테스트, 회신.G구분(), 공용.P메시지_에러)
	공용.F테스트_같음(테스트, 회신.G길이(), 0)

	회신 = 공용.New질의(공용.P메시지_GET, 종목_모음[0], "잘못된 포지션 종류").G회신(Ch종목별_보유량)
	공용.F테스트_에러발생(테스트, 회신.G에러())
	공용.F테스트_같음(테스트, 회신.G구분(), 공용.P메시지_에러)
	공용.F테스트_같음(테스트, 회신.G길이(), 0)

	회신 = 공용.New질의(공용.P메시지_GET, 종목_모음[0], "잘못된 포지션 종류").G회신(Ch종목별_보유량)
	공용.F테스트_에러발생(테스트, 회신.G에러())
	공용.F테스트_같음(테스트, 회신.G구분(), 공용.P메시지_에러)
	공용.F테스트_같음(테스트, 회신.G길이(), 0)
}
